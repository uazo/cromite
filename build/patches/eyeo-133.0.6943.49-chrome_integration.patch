From: chromium-sdk <project_26591639_bot@noreply.gitlab.com>
Date: Fri, 14 Feb 2025 08:26:33 +0100
Subject: eyeo Browser Ad filtering Solution: Chrome Integration Module

Based on Chromium 133.0.6943.49

Pre-requisites: eyeo Browser Ad filtering Solution: Base Module
---
 chrome/app/chrome_main_delegate.cc            |   7 +-
 chrome/browser/BUILD.gn                       |   8 +
 chrome/browser/adblock/README.md              |   3 +
 .../adblock_chrome_content_browser_client.cc  |  27 +
 .../adblock_chrome_content_browser_client.h   |  31 ++
 ..._chrome_content_browser_client_unittest.cc | 204 ++++++++
 chrome/browser/adblock/android/BUILD.gn       |  79 +++
 .../adblock/AdblockControllerTest.java        |  52 ++
 .../adblock/AdblockPopupMessageTest.java      | 113 +++++
 .../browser/adblock/CheckChromeFlagsTest.java |  65 +++
 .../browser/adblock/DefaultSettingsTest.java  |  54 ++
 .../adblock/FilteringConfigurationTest.java   |  79 +++
 .../ResourceClassificationNotifierTest.java   | 153 ++++++
 .../adblock/TestPagesCircumventionTest.java   |  56 +++
 .../browser/adblock/TestPagesCspTest.java     |  56 +++
 .../adblock/TestPagesElemhideEmuInvTest.java  |  53 ++
 .../adblock/TestPagesElemhideEmuTest.java     |  53 ++
 .../adblock/TestPagesElemhideTest.java        |  53 ++
 .../adblock/TestPagesExceptionTest.java       | 114 +++++
 .../browser/adblock/TestPagesFilterTest.java  | 113 +++++
 .../adblock/TestPagesHeaderFilterTest.java    |  56 +++
 .../browser/adblock/TestPagesHelper.java      | 144 ++++++
 .../adblock/TestPagesInlineCssTest.java       |  53 ++
 .../browser/adblock/TestPagesRemoveTest.java  |  53 ++
 .../browser/adblock/TestPagesRewriteTest.java |  56 +++
 .../adblock/TestPagesServiceWorkersTest.java  |  56 +++
 .../browser/adblock/TestPagesSiteKeyTest.java |  56 +++
 .../adblock/TestPagesSnippetsTest.java        |  56 +++
 .../adblock/TestPagesWebsocketTest.java       |  56 +++
 .../adblock/TestPagesWildcardDomainTest.java  |  56 +++
 ...ock_frame_hierarchy_builder_browsertest.cc | 474 ++++++++++++++++++
 .../test/adblock_multiple_tabs_browsertest.cc | 168 +++++++
 .../adblock/test/adblock_popup_browsertest.cc | 462 +++++++++++++++++
 chrome/browser/chrome_browser_main.cc         |   7 +
 .../client_hints/client_hints_browsertest.cc  |  11 +-
 chrome/browser/extensions/BUILD.gn            |   5 +
 chrome/browser/net/errorpage_browsertest.cc   |   8 +
 ..._page_load_metrics_observer_browsertest.cc |   7 +-
 chrome/browser/preferences/BUILD.gn           |   4 +
 .../prefs/chrome_pref_service_factory.cc      |  11 +
 ...hrome_browser_main_extra_parts_profiles.cc |  22 +
 .../profile_keyed_service_browsertest.cc      |  18 +
 chrome/browser/resources/BUILD.gn             |   5 +
 .../safe_browsing_blocking_page_test.cc       |   7 +-
 ...subresource_filter_browser_test_harness.cc |   8 +-
 chrome/browser/ui/BUILD.gn                    |   4 +
 chrome/browser/ui/prefs/pref_watcher.cc       |  13 +
 chrome/browser/ui/tab_helpers.cc              |  13 +
 chrome/chrome_paks.gni                        |   5 +
 chrome/common/BUILD.gn                        |   3 +
 chrome/test/BUILD.gn                          |  14 +
 chrome/test/base/in_process_browser_test.cc   |  24 +-
 52 files changed, 3302 insertions(+), 6 deletions(-)
 create mode 100644 chrome/browser/adblock/README.md
 create mode 100644 chrome/browser/adblock/adblock_chrome_content_browser_client.cc
 create mode 100644 chrome/browser/adblock/adblock_chrome_content_browser_client.h
 create mode 100644 chrome/browser/adblock/adblock_chrome_content_browser_client_unittest.cc
 create mode 100644 chrome/browser/adblock/android/BUILD.gn
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/AdblockControllerTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/AdblockPopupMessageTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/CheckChromeFlagsTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/DefaultSettingsTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/FilteringConfigurationTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/ResourceClassificationNotifierTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesCircumventionTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesCspTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuInvTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesExceptionTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesFilterTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesHeaderFilterTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesHelper.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesInlineCssTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesRemoveTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesRewriteTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesServiceWorkersTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesSiteKeyTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesSnippetsTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesWebsocketTest.java
 create mode 100644 chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesWildcardDomainTest.java
 create mode 100644 chrome/browser/adblock/test/adblock_frame_hierarchy_builder_browsertest.cc
 create mode 100644 chrome/browser/adblock/test/adblock_multiple_tabs_browsertest.cc
 create mode 100644 chrome/browser/adblock/test/adblock_popup_browsertest.cc

diff --git a/chrome/app/chrome_main_delegate.cc b/chrome/app/chrome_main_delegate.cc
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -1,6 +1,10 @@
 // Copyright 2012 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #ifdef UNSAFE_BUFFERS_BUILD
 // TODO(crbug.com/40285824): Remove this and convert code to safer constructs.
@@ -43,6 +47,7 @@
 #include "base/timer/timer.h"
 #include "base/trace_event/trace_event_impl.h"
 #include "build/build_config.h"
+#include "chrome/browser/adblock/adblock_chrome_content_browser_client.h"
 #include "chrome/browser/buildflags.h"
 #include "chrome/browser/chrome_content_browser_client.h"
 #include "chrome/browser/chrome_resource_bundle_helper.h"
@@ -1625,7 +1630,7 @@ content::ContentClient* ChromeMainDelegate::CreateContentClient() {
 content::ContentBrowserClient*
 ChromeMainDelegate::CreateContentBrowserClient() {
   chrome_content_browser_client_ =
-      std::make_unique<ChromeContentBrowserClient>();
+      std::make_unique<AdblockChromeContentBrowserClient>();
 #if !BUILDFLAG(IS_ANDROID)
   // Android does this in `ChromeMainDelegateAndroid::PreSandboxStartup`.
   CHECK(sampling_profiler_);
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//base/allocator/allocator.gni")
 import("//build/buildflag_header.gni")
@@ -174,6 +177,8 @@ static_library("browser") {
     "accessibility/page_colors_factory.h",
     "accessibility/prefers_default_scrollbar_styles_prefs.cc",
     "accessibility/prefers_default_scrollbar_styles_prefs.h",
+    "adblock/adblock_chrome_content_browser_client.cc",
+    "adblock/adblock_chrome_content_browser_client.h",
     "after_startup_task_utils.cc",
     "after_startup_task_utils.h",
     "app_mode/app_mode_utils.cc",
@@ -2083,6 +2088,7 @@ static_library("browser") {
     "//chrome/common/notifications",
     "//chrome/installer/util:with_no_strings",
     "//chrome/services/speech/buildflags",
+    "//components/adblock/content:browser",
     "//components/application_locale_storage",
     "//components/assist_ranker",
     "//components/autofill/content/browser",
@@ -3330,6 +3336,7 @@ static_library("browser") {
       "touch_to_fill/password_manager/touch_to_fill_controller_webauthn_delegate.h",
     ]
 
+
     deps += [
       ":delta_file_proto",
       ":profile_token",
@@ -8511,6 +8518,7 @@ static_library("browser_public_dependencies") {
     "//chrome/services/file_util/public/mojom",
     "//components/account_id",
     "//components/autofill/content/browser",
+    "//components/adblock/content:browser",
     "//components/autofill/core/browser",
     "//components/commerce/core/product_specifications:product_specifications",
     "//components/compose/core/browser:mojo_bindings",
diff --git a/chrome/browser/adblock/README.md b/chrome/browser/adblock/README.md
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/README.md
@@ -0,0 +1,3 @@
+This folder contains the OS-agnostic, Chrome-specific source code of eyeo Chromium SDK.
+
+For the full documentation, refer to [components/adblock](/components/adblock).
diff --git a/chrome/browser/adblock/adblock_chrome_content_browser_client.cc b/chrome/browser/adblock/adblock_chrome_content_browser_client.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_chrome_content_browser_client.cc
@@ -0,0 +1,27 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/adblock_chrome_content_browser_client.h"
+
+#include "chrome/browser/profiles/profile.h"
+
+content::BrowserContext*
+AdblockChromeContentBrowserClient::GetBrowserContextForEyeoFactories(
+    content::BrowserContext* current_browser_context) {
+  return Profile::FromBrowserContext(current_browser_context)
+      ->GetOriginalProfile();
+}
diff --git a/chrome/browser/adblock/adblock_chrome_content_browser_client.h b/chrome/browser/adblock/adblock_chrome_content_browser_client.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_chrome_content_browser_client.h
@@ -0,0 +1,31 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_ADBLOCK_CHROME_CONTENT_BROWSER_CLIENT_H_
+#define CHROME_BROWSER_ADBLOCK_ADBLOCK_CHROME_CONTENT_BROWSER_CLIENT_H_
+
+#include "chrome/browser/chrome_content_browser_client.h"
+#include "components/adblock/content/browser/adblock_content_browser_client.h"
+
+class AdblockChromeContentBrowserClient
+    : public adblock::AdblockContentBrowserClient<ChromeContentBrowserClient> {
+ private:
+  content::BrowserContext* GetBrowserContextForEyeoFactories(
+      content::BrowserContext* current_browser_context) override;
+};
+
+#endif  // CHROME_BROWSER_ADBLOCK_ADBLOCK_CHROME_CONTENT_BROWSER_CLIENT_H_
diff --git a/chrome/browser/adblock/adblock_chrome_content_browser_client_unittest.cc b/chrome/browser/adblock/adblock_chrome_content_browser_client_unittest.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_chrome_content_browser_client_unittest.cc
@@ -0,0 +1,204 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/adblock_chrome_content_browser_client.h"
+
+#include "base/callback_list.h"
+#include "base/memory/raw_ptr.h"
+#include "base/run_loop.h"
+#include "base/test/gmock_move_support.h"
+#include "base/test/mock_callback.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/test/base/chrome_render_view_host_test_harness.h"
+#include "components/adblock/content/browser/factories/resource_classification_runner_factory.h"
+#include "components/adblock/content/browser/factories/subscription_service_factory.h"
+#include "components/adblock/content/browser/test/mock_resource_classification_runner.h"
+#include "components/adblock/core/common/adblock_prefs.h"
+#include "components/adblock/core/common/content_type.h"
+#include "components/adblock/core/subscription/installed_subscription.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "components/adblock/core/subscription/test/mock_subscription_collection.h"
+#include "components/adblock/core/subscription/test/mock_subscription_service.h"
+#include "components/keyed_service/core/keyed_service.h"
+#include "content/public/browser/content_browser_client.h"
+#include "content/public/test/mock_render_process_host.h"
+#include "content/public/test/test_renderer_host.h"
+#include "gmock/gmock.h"
+#include "services/network/public/mojom/network_context.mojom.h"
+#include "services/network/public/mojom/websocket.mojom.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+using testing::_;
+using testing::Ref;
+using testing::Return;
+
+namespace adblock {
+
+class AdblockChromeContentBrowserClientUnitTest
+    : public ChromeRenderViewHostTestHarness {
+ public:
+  TestingProfile::TestingFactories GetTestingFactories() const override {
+    return {TestingProfile::TestingFactory{
+                SubscriptionServiceFactory::GetInstance(),
+                base::BindRepeating([](content::BrowserContext* bc)
+                                        -> std::unique_ptr<KeyedService> {
+                  return std::make_unique<MockSubscriptionService>();
+                })},
+            TestingProfile::TestingFactory{
+                ResourceClassificationRunnerFactory::GetInstance(),
+                base::BindRepeating([](content::BrowserContext* bc)
+                                        -> std::unique_ptr<KeyedService> {
+                  return std::make_unique<MockResourceClassificationRunner>();
+                })}};
+  }
+
+  void SetUp() override {
+    ChromeRenderViewHostTestHarness::SetUp();
+
+    subscription_service_ = static_cast<MockSubscriptionService*>(
+        SubscriptionServiceFactory::GetForBrowserContext(profile()));
+    resource_classification_runner_ =
+        static_cast<MockResourceClassificationRunner*>(
+            ResourceClassificationRunnerFactory::GetForBrowserContext(
+                profile()));
+  }
+
+  void TearDown() override {
+    subscription_service_ = nullptr;
+    resource_classification_runner_ = nullptr;
+    ChromeRenderViewHostTestHarness::TearDown();
+  }
+
+  raw_ptr<MockSubscriptionService> subscription_service_;
+  raw_ptr<MockResourceClassificationRunner> resource_classification_runner_;
+};
+
+TEST_F(AdblockChromeContentBrowserClientUnitTest,
+       WillInterceptWebSocketWhenFilteringEnabled) {
+  AdblockChromeContentBrowserClient content_client;
+  subscription_service_->WillRequireFiltering(true);
+  EXPECT_TRUE(content_client.WillInterceptWebSocket(main_rfh()));
+}
+
+TEST_F(AdblockChromeContentBrowserClientUnitTest,
+       WillNotInterceptWebSocketWhenFilteringDisabled) {
+  AdblockChromeContentBrowserClient content_client;
+  subscription_service_->WillRequireFiltering(false);
+  EXPECT_FALSE(content_client.WillInterceptWebSocket(main_rfh()));
+}
+
+TEST_F(AdblockChromeContentBrowserClientUnitTest,
+       RenderFrameHostDiesBeforeClassificationFinished) {
+  const auto kSocketUrl = GURL("wss://domain.com/test");
+  subscription_service_->WillRequireFiltering(true);
+  EXPECT_CALL(*subscription_service_, GetCurrentSnapshot()).WillOnce([]() {
+    SubscriptionService::Snapshot snapshot;
+    snapshot.push_back(std::make_unique<MockSubscriptionCollection>());
+    return snapshot;
+  });
+  CheckFilterMatchCallback classification_callback;
+  EXPECT_CALL(*resource_classification_runner_,
+              CheckRequestFilterMatch(_, kSocketUrl, ContentType::Websocket,
+                                      RequestInitiator(main_rfh()), _))
+      .WillOnce(MoveArg<4>(&classification_callback));
+
+  AdblockChromeContentBrowserClient content_client;
+  base::MockCallback<content::ContentBrowserClient::WebSocketFactory>
+      web_socket_factory;
+  // The web_socket_factory callback will never be called because the
+  // associated RenderFrameHost will be dead.
+  EXPECT_CALL(web_socket_factory, Run(_, _, _, _, _)).Times(0);
+
+  const net::SiteForCookies site_for_cookies;
+  content_client.CreateWebSocket(main_rfh(), web_socket_factory.Get(),
+                                 kSocketUrl, site_for_cookies, absl::nullopt,
+                                 {});
+  // Tab is closed.
+  DeleteContents();
+
+  // Classification finishes now. It will not trigger a call to
+  // |web_socket_factory| because the RFH is dead.
+  std::move(classification_callback).Run(FilterMatchResult::kBlockRule);
+
+  task_environment()->RunUntilIdle();
+}
+
+TEST_F(AdblockChromeContentBrowserClientUnitTest, WebSocketAllowed) {
+  subscription_service_->WillRequireFiltering(true);
+  const auto kSocketUrl = GURL("wss://domain.com/test");
+  EXPECT_CALL(*subscription_service_, GetCurrentSnapshot()).WillOnce([]() {
+    SubscriptionService::Snapshot snapshot;
+    snapshot.push_back(std::make_unique<MockSubscriptionCollection>());
+    return snapshot;
+  });
+  CheckFilterMatchCallback classification_callback;
+  EXPECT_CALL(*resource_classification_runner_,
+              CheckRequestFilterMatch(_, kSocketUrl, ContentType::Websocket,
+                                      RequestInitiator(main_rfh()), _))
+      .WillOnce(MoveArg<4>(&classification_callback));
+
+  AdblockChromeContentBrowserClient content_client;
+  base::MockCallback<content::ContentBrowserClient::WebSocketFactory>
+      web_socket_factory;
+  // The web_socket_factory callback will be called to let the web socket
+  // continue connecting.
+  EXPECT_CALL(web_socket_factory, Run(kSocketUrl, _, _, _, _));
+
+  const net::SiteForCookies site_for_cookies;
+  content_client.CreateWebSocket(main_rfh(), web_socket_factory.Get(),
+                                 kSocketUrl, site_for_cookies, absl::nullopt,
+                                 {});
+
+  // Classification finishes now. It will trigger a call to |web_socket_factory|
+  std::move(classification_callback).Run(FilterMatchResult::kAllowRule);
+
+  task_environment()->RunUntilIdle();
+}
+
+TEST_F(AdblockChromeContentBrowserClientUnitTest, WebSocketBlocked) {
+  subscription_service_->WillRequireFiltering(true);
+  const auto kSocketUrl = GURL("wss://domain.com/test");
+  EXPECT_CALL(*subscription_service_, GetCurrentSnapshot()).WillOnce([]() {
+    SubscriptionService::Snapshot snapshot;
+    snapshot.push_back(std::make_unique<MockSubscriptionCollection>());
+    return snapshot;
+  });
+  CheckFilterMatchCallback classification_callback;
+  EXPECT_CALL(*resource_classification_runner_,
+              CheckRequestFilterMatch(_, kSocketUrl, ContentType::Websocket,
+                                      RequestInitiator(main_rfh()), _))
+      .WillOnce(MoveArg<4>(&classification_callback));
+
+  AdblockChromeContentBrowserClient content_client;
+  base::MockCallback<content::ContentBrowserClient::WebSocketFactory>
+      web_socket_factory;
+  // The web_socket_factory callback will not be called as to disallow
+  // connection.
+  EXPECT_CALL(web_socket_factory, Run(kSocketUrl, _, _, _, _)).Times(0);
+
+  const net::SiteForCookies site_for_cookies;
+  content_client.CreateWebSocket(main_rfh(), web_socket_factory.Get(),
+                                 kSocketUrl, site_for_cookies, absl::nullopt,
+                                 {});
+
+  // Classification finishes now.
+  std::move(classification_callback).Run(FilterMatchResult::kBlockRule);
+
+  task_environment()->RunUntilIdle();
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/android/BUILD.gn b/chrome/browser/adblock/android/BUILD.gn
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/BUILD.gn
@@ -0,0 +1,79 @@
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+import("//build/config/android/rules.gni")
+import("//build/config/locales.gni")
+import("//third_party/jni_zero/jni_zero.gni")
+import("//tools/grit/grit_rule.gni")
+
+android_library("adblock_java_tests") {
+  testonly = true
+
+  sources = [
+    "javatests/src/org/chromium/chrome/browser/adblock/AdblockControllerTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/CheckChromeFlagsTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/DefaultSettingsTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/FilteringConfigurationTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/ResourceClassificationNotifierTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesCircumventionTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesCspTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuInvTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesExceptionTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesFilterTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesHeaderFilterTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesHelper.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesInlineCssTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesRemoveTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesRewriteTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesServiceWorkersTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesSiteKeyTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesSnippetsTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesWebsocketTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesWildcardDomainTest.java",
+  ]
+
+  deps = []
+
+
+  deps += [
+    "//base:base_java",
+    "//base:base_java_test_support",
+    "//chrome/android:chrome_java",
+    "//chrome/browser/flags:java",
+    "//chrome/browser/profiles/android:java",
+    "//chrome/browser/settings:test_support_java",
+    "//chrome/browser/tab:java",
+    "//chrome/browser/tabmodel:java",
+    "//chrome/test/android:chrome_java_integration_test_support",
+    "//chrome/test/android:chrome_java_test_support_common",
+    "//components/adblock/android:adblock_controller_java",
+    "//components/adblock/android:adblock_java_tests_base",
+    "//components/infobars/android:java",
+    "//components/infobars/core:infobar_enums_java",
+    "//components/messages/android/test:test_support_java",
+    "//content/public/android:content_full_java",
+    "//content/public/android:content_main_dex_java",
+    "//content/public/test/android:content_java_test_support",
+    "//net/android:net_java_test_support",
+    "//third_party/androidx:androidx_fragment_fragment_java",
+    "//third_party/androidx:androidx_test_monitor_java",
+    "//third_party/androidx:androidx_test_runner_java",
+    "//third_party/hamcrest:hamcrest_core_java",
+    "//third_party/hamcrest:hamcrest_library_java",
+    "//third_party/junit:junit",
+    "//ui/android:ui_no_recycler_view_java",
+    "//url:gurl_java",
+  ]
+
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/AdblockControllerTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/AdblockControllerTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/AdblockControllerTest.java
@@ -0,0 +1,52 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.browser.profiles.ProfileManager;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockController;
+import org.chromium.components.adblock.AdblockControllerTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class AdblockControllerTest extends AdblockControllerTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    @Before
+    public void setUp() {
+        mActivityTestRule.startMainActivityOnBlankPage();
+        ThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mAdblockController =
+                            AdblockController.getInstance(
+                                    ProfileManager.getLastUsedRegularProfile());
+                });
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/AdblockPopupMessageTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/AdblockPopupMessageTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/AdblockPopupMessageTest.java
@@ -0,0 +1,113 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import androidx.test.InstrumentationRegistry;
+import androidx.test.filters.MediumTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.CriteriaHelper;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.browser.tabmodel.TabModelSelector;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.messages.MessageDispatcher;
+import org.chromium.components.messages.MessageDispatcherProvider;
+import org.chromium.components.messages.MessageIdentifier;
+import org.chromium.components.messages.MessageStateHandler;
+import org.chromium.components.messages.MessagesTestHelper;
+import org.chromium.net.test.EmbeddedTestServer;
+
+import java.util.List;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class AdblockPopupMessageTest {
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private static final String POPUP_HTML_PATH = "/chrome/test/data/android/popup_test.html";
+
+    private String mPopupHtmlUrl;
+    private EmbeddedTestServer mTestServer;
+
+    private void isPopupMessageShown(boolean visible) {
+        CriteriaHelper.pollUiThread(
+                () -> {
+                    final MessageDispatcher messageDispatcher =
+                            MessageDispatcherProvider.from(
+                                    mActivityTestRule.getActivity().getWindowAndroid());
+                    assert messageDispatcher != null;
+                    final List<MessageStateHandler> messages =
+                            MessagesTestHelper.getEnqueuedMessages(
+                                    messageDispatcher, MessageIdentifier.POPUP_BLOCKED);
+                    assert (visible ? !messages.isEmpty() : messages.isEmpty());
+                });
+    }
+
+    @Before
+    public void setUp() throws Exception {
+        // Create a new temporary instance to ensure the Class is loaded. Otherwise we will get a
+        // ClassNotFoundException when trying to instantiate during startup.
+        mActivityTestRule.startMainActivityOnBlankPage();
+
+        mTestServer = EmbeddedTestServer.createAndStartServer(InstrumentationRegistry.getContext());
+        mPopupHtmlUrl = mTestServer.getURL(POPUP_HTML_PATH);
+    }
+
+    @After
+    public void tearDown() {
+        mTestServer.stopAndDestroyServer();
+    }
+
+    public int getTabCount() {
+        final TabModelSelector tabModelSelector =
+                mActivityTestRule.getActivity().getTabModelSelectorSupplier().get();
+        Assert.assertNotNull(tabModelSelector);
+        return tabModelSelector.getTotalTabCount();
+    }
+
+    @Test
+    @MediumTest
+    @Feature({"adblock"})
+    public void popUpBlockedMessageVisibleWhenAbpEnabled() {
+        isPopupMessageShown(false);
+        mActivityTestRule.loadUrl(mPopupHtmlUrl);
+        Assert.assertEquals(1, getTabCount());
+        isPopupMessageShown(true);
+    }
+
+    @Test
+    @MediumTest
+    @CommandLineFlags.Add({"disable-adblock"})
+    @Feature({"adblock"})
+    public void popUpBlockedMessageVisibleWhenAbpDisabled() {
+        isPopupMessageShown(false);
+        mActivityTestRule.loadUrl(mPopupHtmlUrl);
+        Assert.assertEquals(1, getTabCount());
+        isPopupMessageShown(true);
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/CheckChromeFlagsTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/CheckChromeFlagsTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/CheckChromeFlagsTest.java
@@ -0,0 +1,65 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.TestVerificationUtils;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class CheckChromeFlagsTest {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    public static final String CHROME_FLAGS_URL = "chrome://flags/";
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCheckChromeFlagsDoesntCrash() throws Exception {
+        mHelper.loadUrl(CHROME_FLAGS_URL);
+        TestVerificationUtils.verifyCondition(mHelper, "document.title == 'Experiments'");
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/DefaultSettingsTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/DefaultSettingsTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/DefaultSettingsTest.java
@@ -0,0 +1,54 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.browser.profiles.ProfileManager;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.DefaultSettingsTestBase;
+import org.chromium.content_public.browser.BrowserContextHandle;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class DefaultSettingsTest extends DefaultSettingsTestBase {
+    @Override
+    protected BrowserContextHandle getBrowserContext() {
+        return ThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    return ProfileManager.getLastUsedRegularProfile();
+                });
+    }
+
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    @Before
+    public void setUp() {
+        mActivityTestRule.startMainActivityOnBlankPage();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/FilteringConfigurationTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/FilteringConfigurationTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/FilteringConfigurationTest.java
@@ -0,0 +1,79 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.browser.profiles.ProfileManager;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.FilteringConfigurationTestBase;
+import org.chromium.content_public.browser.BrowserContextHandle;
+import org.chromium.content_public.common.ContentSwitches;
+
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    ContentSwitches.HOST_RESOLVER_RULES + "=MAP * 127.0.0.1",
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class FilteringConfigurationTest extends FilteringConfigurationTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Override
+    protected void loadTestUrl() throws Exception {
+        mActivityTestRule.loadUrl(mTestUrl, 5);
+    }
+
+    @Override
+    protected BrowserContextHandle getBrowserContext() {
+        return ThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    return ProfileManager.getLastUsedRegularProfile();
+                });
+    }
+
+    @Before
+    public void setUp() throws TimeoutException {
+        mActivityTestRule.startMainActivityOnBlankPage();
+        mHelper.setActivityTestRule(mActivityTestRule);
+        super.setUp(mHelper, "/components/test/data/adblock/innermost_frame.html");
+    }
+
+    @After
+    @Override
+    public void tearDown() {
+        mHelper.tearDown();
+        super.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/ResourceClassificationNotifierTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/ResourceClassificationNotifierTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/ResourceClassificationNotifierTest.java
@@ -0,0 +1,153 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import androidx.test.InstrumentationRegistry;
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.base.test.util.IntegrationTest;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.browser.profiles.ProfileManager;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockController;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.FilteringConfiguration;
+import org.chromium.components.adblock.ResourceClassificationNotifier;
+import org.chromium.components.adblock.TestResourceFilteringObserver;
+import org.chromium.content_public.common.ContentSwitches;
+import org.chromium.net.test.EmbeddedTestServer;
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    ContentSwitches.HOST_RESOLVER_RULES + "=MAP * 127.0.0.1",
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class ResourceClassificationNotifierTest {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final CallbackHelper mHelper = new CallbackHelper();
+    public FilteringConfiguration mConfiguration;
+    public TestResourceFilteringObserver mResourceFilteringObserver =
+            new TestResourceFilteringObserver();
+
+    private EmbeddedTestServer mTestServer;
+    private String mTestUrl;
+
+    public void loadTestUrl() {
+        mActivityTestRule.loadUrl(mTestUrl, 5);
+    }
+
+    @Before
+    public void setUp() throws TimeoutException {
+        ThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfiguration =
+                            FilteringConfiguration.createConfiguration(
+                                    "a", ProfileManager.getLastUsedRegularProfile());
+                    ResourceClassificationNotifier.getInstance(
+                                    ProfileManager.getLastUsedRegularProfile())
+                            .addResourceFilteringObserver(mResourceFilteringObserver);
+                    mHelper.notifyCalled();
+                });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        mActivityTestRule.startMainActivityOnBlankPage();
+        mTestServer = EmbeddedTestServer.createAndStartServer(InstrumentationRegistry.getContext());
+        mTestUrl =
+                mTestServer.getURLWithHostName(
+                        "test.org", "/components/test/data/adblock/innermost_frame.html");
+    }
+
+    @After
+    public void tearDown() {
+        mTestServer.stopAndDestroyServer();
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void noNotificationWithoutBlocking() throws Exception {
+        loadTestUrl();
+
+        Assert.assertTrue(mResourceFilteringObserver.blockedInfos.isEmpty());
+        Assert.assertTrue(mResourceFilteringObserver.allowedInfos.isEmpty());
+        Assert.assertTrue(mResourceFilteringObserver.allowedPageInfos.isEmpty());
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceBlockedByFilter() throws Exception {
+        ThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfiguration.addCustomFilter("resource.png");
+                    mHelper.notifyCalled();
+                });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        // Observer was notified about the blocking
+        Assert.assertTrue(mResourceFilteringObserver.isBlocked("resource.png"));
+        Assert.assertTrue(mResourceFilteringObserver.allowedInfos.isEmpty());
+        Assert.assertTrue(mResourceFilteringObserver.allowedPageInfos.isEmpty());
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void pageAllowed() throws Exception {
+        ThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfiguration.addCustomFilter("resource.png");
+                    mConfiguration.addAllowedDomain("test.org");
+                    // In general "adblock" configuration does not interfere.
+                    // But for onPageAllowed event all configurations must contain
+                    // page allowing rule so let's add rule there.
+                    AdblockController.getInstance(ProfileManager.getLastUsedRegularProfile())
+                            .addAllowedDomain("test.org");
+                    mHelper.notifyCalled();
+                });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        // Observer was notified about the allowed resource
+        Assert.assertTrue(mResourceFilteringObserver.blockedInfos.isEmpty());
+        Assert.assertTrue(mResourceFilteringObserver.isAllowed("resource.png"));
+        Assert.assertTrue(mResourceFilteringObserver.isPageAllowed("test.org"));
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesCircumventionTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesCircumventionTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesCircumventionTest.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesCircumventionTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesCircumventionTest extends TestPagesCircumventionTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesCspTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesCspTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesCspTest.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesCspTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesCspTest extends TestPagesCspTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuInvTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuInvTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuInvTest.java
@@ -0,0 +1,53 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesElemhideEmuInvTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesElemhideEmuInvTest extends TestPagesElemhideEmuInvTestBase {
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuTest.java
@@ -0,0 +1,53 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesElemhideEmuTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesElemhideEmuTest extends TestPagesElemhideEmuTestBase {
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideTest.java
@@ -0,0 +1,53 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesElemhideTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesElemhideTest extends TestPagesElemhideTestBase {
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesExceptionTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesExceptionTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesExceptionTest.java
@@ -0,0 +1,114 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.task.PostTask;
+import org.chromium.base.task.TaskTraits;
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesExceptionTestBase;
+import org.chromium.content_public.browser.WebContents;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+import org.chromium.content_public.common.ContentSwitches;
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesExceptionTest extends TestPagesExceptionTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    @CommandLineFlags.Add(ContentSwitches.DISABLE_POPUP_BLOCKING)
+    public void testVerifyPopupException() throws Exception {
+        final String POPUP_TESTACE_URL =
+                TestPagesHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "popup";
+        mHelper.loadUrl(POPUP_TESTACE_URL);
+        Assert.assertEquals(1, mHelper.getTabCount());
+        final CallbackHelper tabsLoadedWaiter = mHelper.getTabsOpenedAndLoadedWaiter();
+        final WebContents webContents = mHelper.getWebContents();
+        PostTask.postTask(
+                TaskTraits.BEST_EFFORT_MAY_BLOCK,
+                () -> {
+                    try {
+                        String numElements =
+                                JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                                        webContents,
+                                        "var elements ="
+                                            + " document.getElementsByClassName(\"testcase-trigger\");for"
+                                            + " (let i = 0; i < elements.length; ++i) {   "
+                                            + " elements[i].click();}elements.length;");
+                        Assert.assertEquals("3", numElements);
+                    } catch (TimeoutException e) {
+                        Assert.assertEquals("Popups were triggered", "Popups were NOT triggered");
+                    }
+                });
+        // Wait for three tab loaded events
+        tabsLoadedWaiter.waitForCallback(0, 3, TestPagesHelper.TEST_TIMEOUT_SEC, TimeUnit.SECONDS);
+        Assert.assertEquals(4, mHelper.getTabCount());
+        Assert.assertEquals(3, mHelper.numAllowedPopups());
+        Assert.assertTrue(
+                mHelper.isPopupAllowed(
+                        TestPagesHelper.TESTPAGES_RESOURCES_ROOT + "popup_exception/link.html"));
+        Assert.assertTrue(
+                mHelper.isPopupAllowed(
+                        TestPagesHelper.TESTPAGES_RESOURCES_ROOT
+                                + "popup_exception/script-window.html"));
+        Assert.assertTrue(
+                mHelper.isPopupAllowed(
+                        TestPagesHelper.TESTPAGES_RESOURCES_ROOT
+                                + "popup_exception/script-tab.html"));
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesFilterTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesFilterTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesFilterTest.java
@@ -0,0 +1,113 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.task.PostTask;
+import org.chromium.base.task.TaskTraits;
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesFilterTestBase;
+import org.chromium.content_public.browser.WebContents;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+import org.chromium.content_public.common.ContentSwitches;
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesFilterTest extends TestPagesFilterTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    @CommandLineFlags.Add(ContentSwitches.DISABLE_POPUP_BLOCKING)
+    public void testVerifyPopupFilters() throws Exception {
+        final String POPUP_TESTACE_URL = TestPagesHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "popup";
+        mHelper.loadUrl(POPUP_TESTACE_URL);
+        Assert.assertEquals(1, mHelper.getTabCount());
+        final CallbackHelper tabsOpenedAndClosedWaiter = mHelper.getTabsOpenedAndClosedWaiter();
+        final WebContents webContents = mHelper.getWebContents();
+        // Trigger popups which open and close when blocked
+        PostTask.postTask(
+                TaskTraits.BEST_EFFORT_MAY_BLOCK,
+                () -> {
+                    try {
+                        String numElements =
+                                JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                                        webContents,
+                                        "var elements ="
+                                            + " document.getElementsByClassName(\"testcase-trigger\");for"
+                                            + " (let i = 0; i < elements.length; ++i) {   "
+                                            + " elements[i].click();}elements.length;");
+                        Assert.assertEquals("3", numElements);
+                    } catch (TimeoutException e) {
+                        Assert.assertEquals("Popups were triggered", "Popups were NOT triggered");
+                    }
+                });
+        // Wait for three tab open events and three close tabs events
+        tabsOpenedAndClosedWaiter.waitForCallback(
+                0, 6, TestPagesHelper.TEST_TIMEOUT_SEC, TimeUnit.SECONDS);
+        Assert.assertEquals(3, mHelper.numBlockedPopups());
+        Assert.assertTrue(
+                mHelper.isPopupBlocked(
+                        TestPagesHelper.TESTPAGES_RESOURCES_ROOT + "popup/link.html"));
+        Assert.assertTrue(
+                mHelper.isPopupBlocked(
+                        TestPagesHelper.TESTPAGES_RESOURCES_ROOT + "popup/script-window.html"));
+        Assert.assertTrue(
+                mHelper.isPopupBlocked(
+                        TestPagesHelper.TESTPAGES_RESOURCES_ROOT + "popup/script-tab.html"));
+        Assert.assertEquals(1, mHelper.getTabCount());
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesHeaderFilterTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesHeaderFilterTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesHeaderFilterTest.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesHeaderFilterTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesHeaderFilterTest extends TestPagesHeaderFilterTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesHelper.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesHelper.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesHelper.java
@@ -0,0 +1,144 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.Assert;
+
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.chrome.browser.profiles.ProfileManager;
+import org.chromium.chrome.browser.tab.EmptyTabObserver;
+import org.chromium.chrome.browser.tab.Tab;
+import org.chromium.chrome.browser.tab.Tab.LoadUrlResult;
+import org.chromium.chrome.browser.tabmodel.TabModelObserver;
+import org.chromium.chrome.browser.tabmodel.TabModelSelector;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.TestPagesHelperBase;
+import org.chromium.content_public.browser.BrowserContextHandle;
+import org.chromium.content_public.browser.WebContents;
+import org.chromium.url.GURL;
+
+import java.util.concurrent.TimeoutException;
+
+public class TestPagesHelper extends TestPagesHelperBase {
+    private ChromeTabbedActivityTestRule mActivityTestRule;
+
+    public void setActivityTestRule(ChromeTabbedActivityTestRule activityTestRule) {
+        mActivityTestRule = activityTestRule;
+    }
+
+    public void setUp(final ChromeTabbedActivityTestRule activityRule) {
+        mActivityTestRule = activityRule;
+        mActivityTestRule.startMainActivityOnBlankPage();
+        mActivityTestRule.waitForActivityNativeInitializationComplete();
+        super.setUp();
+    }
+
+    public CallbackHelper getTabsOpenedAndClosedWaiter() {
+        final CallbackHelper callbackHelper = new CallbackHelper();
+        final TabModelSelector tabModelSelector =
+                mActivityTestRule.getActivity().getTabModelSelectorSupplier().get();
+        Assert.assertNotNull(tabModelSelector);
+        ThreadUtils.runOnUiThreadBlocking(
+                () ->
+                        tabModelSelector
+                                .getCurrentModel()
+                                .addObserver(
+                                        new TabModelObserver() {
+                                            @Override
+                                            public void onFinishingTabClosure(Tab tab) {
+                                                // For some reason TabModelObserver#tabRemoved() is
+                                                // not called.
+                                                // Let's wait a bit to make sure tab is indeed
+                                                // closed.
+                                                try {
+                                                    Thread.sleep(100);
+                                                } catch (InterruptedException ignored) {
+                                                }
+                                                callbackHelper.notifyCalled();
+                                            }
+
+                                            @Override
+                                            public void didAddTab(
+                                                    Tab tab,
+                                                    int type,
+                                                    int creationState,
+                                                    boolean markedForSelection) {
+                                                callbackHelper.notifyCalled();
+                                            }
+                                        }));
+        return callbackHelper;
+    }
+
+    public CallbackHelper getTabsOpenedAndLoadedWaiter() {
+        final CallbackHelper callbackHelper = new CallbackHelper();
+        final TabModelSelector tabModelSelector =
+                mActivityTestRule.getActivity().getTabModelSelectorSupplier().get();
+        Assert.assertNotNull(tabModelSelector);
+        ThreadUtils.runOnUiThreadBlocking(
+                () ->
+                        tabModelSelector
+                                .getCurrentModel()
+                                .addObserver(
+                                        new TabModelObserver() {
+                                            @Override
+                                            public void didAddTab(
+                                                    Tab tab,
+                                                    int type,
+                                                    int creationState,
+                                                    boolean markedForSelection) {
+                                                tab.addObserver(
+                                                        new EmptyTabObserver() {
+                                                            @Override
+                                                            public void onPageLoadFinished(
+                                                                    Tab tab, GURL url) {
+                                                                callbackHelper.notifyCalled();
+                                                            }
+                                                        });
+                                            }
+                                        }));
+        return callbackHelper;
+    }
+
+    public int getTabCount() {
+        final TabModelSelector tabModelSelector =
+                mActivityTestRule.getActivity().getTabModelSelectorSupplier().get();
+        Assert.assertNotNull(tabModelSelector);
+        return tabModelSelector.getTotalTabCount();
+    }
+
+    @Override
+    public BrowserContextHandle getBrowserContext() {
+        return ProfileManager.getLastUsedRegularProfile();
+    }
+
+    @Override
+    public WebContents getWebContents() {
+        return mActivityTestRule.getActivity().getCurrentWebContents();
+    }
+
+    @Override
+    public void loadUrl(final String url) throws InterruptedException, TimeoutException {
+        final LoadUrlResult result = mActivityTestRule.loadUrl(url, TEST_TIMEOUT_SEC);
+        Assert.assertEquals(
+                "Page did not load correctly. Load result enum: "
+                        + String.valueOf(result.tabLoadStatus),
+                result.tabLoadStatus,
+                Tab.TabLoadStatus.DEFAULT_PAGE_LOAD);
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesInlineCssTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesInlineCssTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesInlineCssTest.java
@@ -0,0 +1,53 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesInlineCssTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesInlineCssTest extends TestPagesInlineCssTestBase {
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesRemoveTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesRemoveTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesRemoveTest.java
@@ -0,0 +1,53 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesRemoveTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesRemoveTest extends TestPagesRemoveTestBase {
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesRewriteTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesRewriteTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesRewriteTest.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesRewriteTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesRewriteTest extends TestPagesRewriteTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesServiceWorkersTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesServiceWorkersTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesServiceWorkersTest.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesServiceWorkersTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesServiceWorkersTest extends TestPagesServiceWorkersTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesSiteKeyTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesSiteKeyTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesSiteKeyTest.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesSiteKeyTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesSiteKeyTest extends TestPagesSiteKeyTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesSnippetsTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesSnippetsTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesSnippetsTest.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesSnippetsTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesSnippetsTest extends TestPagesSnippetsTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesWebsocketTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesWebsocketTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesWebsocketTest.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesWebsocketTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesWebsocketTest extends TestPagesWebsocketTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesWildcardDomainTest.java b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesWildcardDomainTest.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/javatests/src/org/chromium/chrome/browser/adblock/TestPagesWildcardDomainTest.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.chrome.browser.adblock;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.AdblockSwitches;
+import org.chromium.components.adblock.TestPagesWildcardDomainTestBase;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    AdblockSwitches.DISABLE_EYEO_REQUEST_THROTTLING
+})
+public class TestPagesWildcardDomainTest extends TestPagesWildcardDomainTestBase {
+    @Rule public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+
+    private final TestPagesHelper mHelper = new TestPagesHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        super.setUp(mHelper);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+}
diff --git a/chrome/browser/adblock/test/adblock_frame_hierarchy_builder_browsertest.cc b/chrome/browser/adblock/test/adblock_frame_hierarchy_builder_browsertest.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/test/adblock_frame_hierarchy_builder_browsertest.cc
@@ -0,0 +1,474 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <vector>
+
+#include "base/ranges/algorithm.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ssl/https_upgrades_util.h"
+#include "chrome/browser/ui/browser.h"
+#include "chrome/test/base/in_process_browser_test.h"
+#include "chrome/test/base/ui_test_utils.h"
+#include "components/adblock/content/browser/adblock_filter_match.h"
+#include "components/adblock/content/browser/factories/resource_classification_runner_factory.h"
+#include "components/adblock/content/browser/factories/subscription_service_factory.h"
+#include "components/adblock/content/browser/frame_hierarchy_builder.h"
+#include "components/adblock/content/browser/resource_classification_runner.h"
+#include "components/adblock/core/common/adblock_constants.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "components/blocked_content/popup_blocker_tab_helper.h"
+#include "components/embedder_support/switches.h"
+#include "content/public/test/browser_test.h"
+#include "content/public/test/browser_test_utils.h"
+#include "net/dns/mock_host_resolver.h"
+#include "net/test/embedded_test_server/embedded_test_server.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+namespace adblock {
+
+namespace {
+class TabAddedRemovedObserver : public TabStripModelObserver {
+ public:
+  explicit TabAddedRemovedObserver(TabStripModel* tab_strip_model) {
+    tab_strip_model->AddObserver(this);
+  }
+
+  void OnTabStripModelChanged(
+      TabStripModel* tab_strip_model,
+      const TabStripModelChange& change,
+      const TabStripSelectionChange& selection) override {
+    if (change.type() == TabStripModelChange::kInserted) {
+      inserted_ = true;
+      return;
+    }
+    if (change.type() == TabStripModelChange::kRemoved) {
+      EXPECT_TRUE(inserted_);
+      removed_ = true;
+      loop_.Quit();
+      return;
+    }
+    NOTREACHED();
+  }
+
+  void Wait() {
+    if (inserted_ && removed_) {
+      return;
+    }
+    loop_.Run();
+  }
+
+ private:
+  bool inserted_ = false;
+  bool removed_ = false;
+  base::RunLoop loop_;
+};
+}  // namespace
+
+class ResourceClassificationRunnerObserver
+    : public ResourceClassificationRunner::Observer {
+ public:
+  ~ResourceClassificationRunnerObserver() override {
+    VerifyNoUnexpectedNotifications();
+  }
+  // ResourceClassificationRunner::Observer:
+  void OnRequestMatched(const GURL& url,
+                        FilterMatchResult match_result,
+                        const std::vector<GURL>& parent_frame_urls,
+                        ContentType content_type,
+                        content::RenderFrameHost* render_frame_host,
+                        const GURL& subscription,
+                        const std::string& configuration_name) override {
+    if (match_result == FilterMatchResult::kAllowRule) {
+      allowed_ads_notifications.push_back(url);
+    } else {
+      blocked_ads_notifications.push_back(url);
+    }
+  }
+
+  void OnPageAllowed(const GURL& url,
+                     content::RenderFrameHost* render_frame_host,
+                     const GURL& subscription,
+                     const std::string& configuration_name) override {
+    allowed_pages_notifications.push_back(url);
+  }
+
+  void OnPopupMatched(const GURL& url,
+                      FilterMatchResult match_result,
+                      const GURL& opener_url,
+                      content::RenderFrameHost* render_frame_host,
+                      const GURL& subscription,
+                      const std::string& configuration_name) override {
+    auto& list = (match_result == FilterMatchResult::kBlockRule
+                      ? blocked_popups_notifications
+                      : allowed_popups_notifications);
+    auto it = std::find(list.begin(), list.end(), url.ExtractFileName());
+    ASSERT_FALSE(it == list.end())
+        << "Path " << url.ExtractFileName() << " not on list";
+    list.erase(it);
+    if (popup_notifications_run_loop_ && allowed_popups_notifications.empty() &&
+        blocked_popups_notifications.empty()) {
+      popup_notifications_run_loop_->Quit();
+    }
+  }
+
+  void VerifyNotificationSent(std::string_view path, std::vector<GURL>& list) {
+    auto it = base::ranges::find(list, path, &GURL::ExtractFileName);
+    ASSERT_FALSE(it == list.end()) << "Path " << path << " not on list";
+    // Remove expected notifications so that we can verify there are no
+    // unexpected notifications left by the end of each test.
+    list.erase(it);
+  }
+
+  void VerifyNoUnexpectedNotifications() {
+    EXPECT_TRUE(blocked_ads_notifications.empty());
+    EXPECT_TRUE(allowed_ads_notifications.empty());
+    EXPECT_TRUE(blocked_popups_notifications.empty());
+    EXPECT_TRUE(allowed_popups_notifications.empty());
+    EXPECT_TRUE(allowed_pages_notifications.empty());
+  }
+
+  std::vector<GURL> blocked_ads_notifications;
+  std::vector<GURL> allowed_ads_notifications;
+  std::vector<GURL> allowed_pages_notifications;
+  std::vector<std::string> blocked_popups_notifications;
+  std::vector<std::string> allowed_popups_notifications;
+  std::unique_ptr<base::RunLoop> popup_notifications_run_loop_;
+};
+
+// Simulated setup:
+// http://outer.com/outermost_frame.html
+//   has an iframe: http://middle.com/middle_frame.html
+//     has an iframe: http://inner.com/innermost_frame.html
+//       has a subresource http://inner.com/resource.png
+//
+// All of these files are in components/test/data/adblock. Cross-domain
+// distribution is simulated via SetupCrossSiteRedirector. innermost_frame.html
+// reports whether resource.png is visible via window.top.postMessage to
+// outermost_frame.html, which stores a global subresource_visible JS variable.
+class AdblockFrameHierarchyBrowserTest : public InProcessBrowserTest {
+ public:
+  void SetUpOnMainThread() override {
+    InProcessBrowserTest::SetUpOnMainThread();
+    host_resolver()->AddRule("*", "127.0.0.1");
+    embedded_test_server()->ServeFilesFromSourceDirectory(
+        "components/test/data/adblock");
+    content::SetupCrossSiteRedirector(embedded_test_server());
+    AllowHttpForHostnamesForTesting({"outer.com", "inner.com", "middle.com"},
+                                    browser()->profile()->GetPrefs());
+    ASSERT_TRUE(embedded_test_server()->Start());
+    auto* classification_runner =
+        ResourceClassificationRunnerFactory::GetForBrowserContext(
+            browser()->profile());
+    classification_runner->AddObserver(&observer);
+  }
+
+  void TearDownOnMainThread() override {
+    auto* classification_runner =
+        ResourceClassificationRunnerFactory::GetForBrowserContext(
+            browser()->profile());
+    classification_runner->RemoveObserver(&observer);
+    InProcessBrowserTest::TearDownOnMainThread();
+  }
+
+  void SetUpCommandLine(base::CommandLine* command_line) override {
+    command_line->AppendSwitch(embedder_support::kDisablePopupBlocking);
+  }
+
+  void SetFilters(std::vector<std::string> filters) {
+    auto* adblock_configuration =
+        SubscriptionServiceFactory::GetForBrowserContext(browser()->profile())
+            ->GetFilteringConfiguration(kAdblockFilteringConfigurationName);
+    adblock_configuration->RemoveCustomFilter(kAllowlistEverythingFilter);
+    for (auto& filter : filters) {
+      adblock_configuration->AddCustomFilter(filter);
+    }
+  }
+
+  void NavigateToOutermostFrame() {
+    ASSERT_TRUE(ui_test_utils::NavigateToURL(
+        browser(), embedded_test_server()->GetURL(
+                       "/cross-site/outer.com/outermost_frame.html")));
+  }
+
+  void NavigateToOutermostFrameWithAboutBlank() {
+    ASSERT_TRUE(ui_test_utils::NavigateToURL(
+        browser(),
+        embedded_test_server()->GetURL(
+            "/cross-site/outer.com/outermost_frame_with_about_blank.html")));
+  }
+
+  void NavigateToPopupParentFrameAndWaitForNotifications() {
+    observer.popup_notifications_run_loop_ = std::make_unique<base::RunLoop>();
+    ASSERT_TRUE(ui_test_utils::NavigateToURL(
+        browser(), embedded_test_server()->GetURL(
+                       "/cross-site/outer.com/popup_parent.html")));
+    if (!(observer.allowed_popups_notifications.empty() &&
+          observer.blocked_popups_notifications.empty())) {
+      observer.popup_notifications_run_loop_->Run();
+    }
+  }
+
+  void VerifyTargetResourceShown(bool expected_visible,
+                                 const char* visibility_param) {
+    // Since in one test we dynamically load (write) `about:blank` iframe after
+    // parent page is loaded, we need to have some wait & poll mechanism to wait
+    // until such a frame (and its resources) is completely loaded by JS.
+    std::string script = base::StringPrintf(
+        R"(
+      (async () => {
+        let count = 10;
+        let visibility_param = '%s';
+        function waitFor(condition) {
+          const poll = resolve => {
+            if(condition() || !count--) resolve();
+            else setTimeout(_ => poll(resolve), 200);
+          }
+          return new Promise(poll);
+        }
+        // Waits up to 2 seconds
+        await waitFor(_ => window.subresource_visibility[visibility_param] === %s);
+        return window.subresource_visibility[visibility_param] === false;
+     })()
+     )",
+        visibility_param, expected_visible ? "false" : "true");
+    EXPECT_EQ(
+        expected_visible,
+        content::EvalJs(browser()->tab_strip_model()->GetActiveWebContents(),
+                        script));
+  }
+
+  void VerifyTargetResourceBlockingStatus(bool expected_visible) {
+    VerifyTargetResourceShown(expected_visible, "is_blocked");
+  }
+
+  void VerifyTargetResourceHidingStatus(bool expected_visible) {
+    VerifyTargetResourceShown(expected_visible, "is_hidden");
+  }
+
+  int NumberOfOpenTabs() { return browser()->tab_strip_model()->GetTabCount(); }
+
+  ResourceClassificationRunnerObserver observer;
+};
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       SubresourceShownWithNoFilters) {
+  SetFilters({});
+  NavigateToOutermostFrame();
+  VerifyTargetResourceBlockingStatus(true);
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, SubresourceBlocked) {
+  SetFilters({"/resource.png"});
+  NavigateToOutermostFrame();
+  VerifyTargetResourceBlockingStatus(false);
+  observer.VerifyNotificationSent("resource.png",
+                                  observer.blocked_ads_notifications);
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       SubresourceAllowedViaInnerFrame) {
+  SetFilters({"/resource.png", "@@||inner.com^$document"});
+  NavigateToOutermostFrame();
+  VerifyTargetResourceBlockingStatus(true);
+  observer.VerifyNotificationSent("resource.png",
+                                  observer.allowed_ads_notifications);
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       SubresourceAllowedViaMiddleFrame) {
+  SetFilters({"/resource.png", "@@||middle.com^$document"});
+  NavigateToOutermostFrame();
+  VerifyTargetResourceBlockingStatus(true);
+  observer.VerifyNotificationSent("resource.png",
+                                  observer.allowed_ads_notifications);
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       SubresourceAllowedViaOutermostFrame) {
+  SetFilters({"/resource.png", "@@||outer.com^$document"});
+  NavigateToOutermostFrame();
+  VerifyTargetResourceBlockingStatus(true);
+  observer.VerifyNotificationSent("resource.png",
+                                  observer.allowed_ads_notifications);
+  observer.VerifyNotificationSent("outermost_frame.html",
+                                  observer.allowed_pages_notifications);
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       SubresourceBlockedWhenInvalidAllowRule) {
+  SetFilters({"/resource.png", "@@||bogus.com^$document"});
+  NavigateToOutermostFrame();
+  VerifyTargetResourceBlockingStatus(false);
+  observer.VerifyNotificationSent("resource.png",
+                                  observer.blocked_ads_notifications);
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       DISABLED_PopupHandledByChromiumWithoutFilters) {
+  // Without any popup-specific filters, blocking popups is handed over to
+  // Chromium, which has it's own heuristics that are not based on filters.
+  SetFilters({});
+  NavigateToPopupParentFrameAndWaitForNotifications();
+  // The popup was not opened:
+  EXPECT_EQ(1, NumberOfOpenTabs());
+  // Because Chromium's built-in popup blocker stopped it:
+  EXPECT_EQ(1u, blocked_content::PopupBlockerTabHelper::FromWebContents(
+                    browser()->tab_strip_model()->GetActiveWebContents())
+                    ->GetBlockedPopupsCount());
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, PopupBlockedByFilter) {
+  SetFilters({"http://inner.com*/popup.html$popup"});
+  observer.blocked_popups_notifications.emplace_back("popup.html");
+  TabAddedRemovedObserver observer(browser()->tab_strip_model());
+  NavigateToPopupParentFrameAndWaitForNotifications();
+  observer.Wait();
+  EXPECT_EQ(1, NumberOfOpenTabs());
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, PopupAllowedByFilter) {
+  SetFilters({"http://inner.com*/popup.html$popup",
+              "@@http://inner.com*/popup.html$popup"});
+  observer.allowed_popups_notifications.emplace_back("popup.html");
+  NavigateToPopupParentFrameAndWaitForNotifications();
+  // Popup was allowed to open in a new tab
+  EXPECT_EQ(2, NumberOfOpenTabs());
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       PopupAllowedByDomainSpecificFilter) {
+  // The frame that wants to open the popup is hosted on middle.com.
+  // The $popup allow rule applies to that frame.
+  SetFilters({"http://inner.com*/popup.html$popup",
+              "@@http://inner.com*/popup.html$popup,domain=middle.com"});
+  observer.allowed_popups_notifications.emplace_back("popup.html");
+  NavigateToPopupParentFrameAndWaitForNotifications();
+  // Popup was allowed to open in a new tab
+  EXPECT_EQ(2, NumberOfOpenTabs());
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       PopupNotAllowedByDomainSpecificFilter) {
+  // The frame that wants to open the popup is hosted on middle.com.
+  // The $popup allow rule does not apply because it is specific to outer.com.
+  // outer.com is not the frame that is opening the popup.
+  SetFilters({"http://inner.com*/popup.html$popup",
+              "@@http://inner.com*/popup.html$popup,domain=outer.com"});
+  observer.blocked_popups_notifications.emplace_back("popup.html");
+  TabAddedRemovedObserver observer(browser()->tab_strip_model());
+  NavigateToPopupParentFrameAndWaitForNotifications();
+  observer.Wait();
+  EXPECT_EQ(1, NumberOfOpenTabs());
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       PopupAllowedByParentDocument) {
+  // The outermost frame has a blanket allowing rule of $document type.
+  SetFilters({"http://inner.com*/popup.html$popup",
+              "@@||outer.com^$document,domain=outer.com"});
+  observer.allowed_popups_notifications.emplace_back("popup.html");
+  NavigateToPopupParentFrameAndWaitForNotifications();
+  // Popup was allowed to open in a new tab
+  EXPECT_EQ(2, NumberOfOpenTabs());
+  observer.VerifyNotificationSent("popup_parent.html",
+                                  observer.allowed_pages_notifications);
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+                       PopupAllowedByIntermediateParentDocument) {
+  // The middle frame has a blanket allowing rule of $document type.
+  SetFilters({"http://inner.com*/popup.html$popup",
+              "@@||middle.com^$document,domain=outer.com"});
+  observer.allowed_popups_notifications.emplace_back("popup.html");
+  NavigateToPopupParentFrameAndWaitForNotifications();
+  // Popup was allowed to open in a new tab
+  EXPECT_EQ(2, NumberOfOpenTabs());
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, BlankFrameHiding) {
+  SetFilters({"##.about_blank_div"});
+  NavigateToOutermostFrameWithAboutBlank();
+  std::string script = R"(
+    function writeIframe() {
+      let frameDocument = document.getElementById("about_blank").contentWindow.document;
+      frameDocument.open("text/html");
+      frameDocument.write(`
+        <html>
+          <body>
+            <div class="about_blank_div">
+              <iframe id='middle_frame' src='/cross-site/middle.com/middle_frame.html' width='400'></iframe>
+            </div>
+          </body>
+        </html>`);
+      frameDocument.close();
+    }
+    if (document.readyState == "complete") {
+      writeIframe();
+    } else {
+      document.getElementById("about_blank").addEventListener("load", writeIframe);
+    }
+  )";
+  EXPECT_TRUE(content::ExecJs(
+      browser()->tab_strip_model()->GetActiveWebContents(), script));
+  VerifyTargetResourceHidingStatus(false);
+  SetFilters({"@@^eyeo=true$document"});
+  NavigateToOutermostFrameWithAboutBlank();
+  EXPECT_TRUE(content::ExecJs(
+      browser()->tab_strip_model()->GetActiveWebContents(), script));
+  VerifyTargetResourceHidingStatus(true);
+}
+
+IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, BlankFrameBlocking) {
+  SetFilters({"/resource.png"});
+  NavigateToOutermostFrameWithAboutBlank();
+  std::string script = R"(
+    function writeIframe() {
+      let frameDocument = document.getElementById("about_blank").contentWindow.document;
+      frameDocument.open("text/html");
+      frameDocument.write(`
+        <html>
+          <body>
+            <iframe id='middle_frame' src='/cross-site/middle.com/middle_frame.html' width='400'></iframe>
+          </body>
+        </html>`);
+      frameDocument.close();
+    }
+    if (document.readyState == "complete") {
+      writeIframe();
+    } else {
+      document.getElementById("about_blank").addEventListener("load", writeIframe);
+    }
+  )";
+  EXPECT_TRUE(content::ExecJs(
+      browser()->tab_strip_model()->GetActiveWebContents(), script));
+  VerifyTargetResourceBlockingStatus(false);
+  observer.VerifyNotificationSent("resource.png",
+                                  observer.blocked_ads_notifications);
+  SetFilters({"@@^eyeo=true$document"});
+  NavigateToOutermostFrameWithAboutBlank();
+  EXPECT_TRUE(content::ExecJs(
+      browser()->tab_strip_model()->GetActiveWebContents(), script));
+  VerifyTargetResourceBlockingStatus(true);
+  observer.VerifyNotificationSent("resource.png",
+                                  observer.allowed_ads_notifications);
+}
+
+// More tests can be added / parametrized, e.g.:
+// - elemhide blocking filters (in conjunction with $elemhide allow rules)
+// - $subdocument-based allow rules
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/test/adblock_multiple_tabs_browsertest.cc b/chrome/browser/adblock/test/adblock_multiple_tabs_browsertest.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/test/adblock_multiple_tabs_browsertest.cc
@@ -0,0 +1,168 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/browser.h"
+#include "chrome/browser/ui/browser_list.h"
+#include "chrome/browser/ui/tabs/recent_tabs_sub_menu_model.h"
+#include "chrome/test/base/in_process_browser_test.h"
+#include "chrome/test/base/ui_test_utils.h"
+#include "components/adblock/content/browser/factories/resource_classification_runner_factory.h"
+#include "components/adblock/content/browser/factories/subscription_service_factory.h"
+#include "components/adblock/content/browser/resource_classification_runner.h"
+#include "components/adblock/core/common/adblock_constants.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "components/sessions/content/session_tab_helper.h"
+#include "content/public/test/browser_test.h"
+#include "content/public/test/browser_test_utils.h"
+#include "net/dns/mock_host_resolver.h"
+#include "net/test/embedded_test_server/embedded_test_server.h"
+
+namespace adblock {
+
+class AdblockMultipleTabsBrowserTest
+    : public InProcessBrowserTest,
+      public ResourceClassificationRunner::Observer {
+ public:
+  void SetUpOnMainThread() override {
+    host_resolver()->AddRule(kTestDomain, "127.0.0.1");
+    embedded_test_server()->ServeFilesFromSourceDirectory(
+        "components/test/data/adblock");
+    ASSERT_TRUE(embedded_test_server()->Start());
+    ResourceClassificationRunnerFactory::GetForBrowserContext(
+        browser()->profile())
+        ->AddObserver(this);
+    SetFilters({"blocked.png", "allowed.png", "@@allowed.png"});
+  }
+
+  void TearDownInProcessBrowserTestFixture() override {
+    ASSERT_EQ(kTabsCount, static_cast<int>(tabs_with_blocked_resource_.size()));
+    ASSERT_EQ(kTabsCount, static_cast<int>(tabs_with_allowed_resource_.size()));
+  }
+
+  void SetFilters(std::vector<std::string> filters) {
+    auto* adblock_configuration =
+        SubscriptionServiceFactory::GetForBrowserContext(browser()->profile())
+            ->GetFilteringConfiguration(kAdblockFilteringConfigurationName);
+    adblock_configuration->RemoveCustomFilter(kAllowlistEverythingFilter);
+    for (auto& filter : filters) {
+      adblock_configuration->AddCustomFilter(filter);
+    }
+  }
+
+  void RestoreTabs(Browser* browser) {
+    content::DOMMessageQueue queue;
+    RecentTabsSubMenuModel menu(nullptr, browser);
+    menu.ExecuteCommand(menu.GetFirstRecentTabsCommandId(), 0);
+    for (int i = 0; i < kTabsCount; ++i) {
+      std::string message;
+      EXPECT_TRUE(queue.WaitForMessage(&message));
+      EXPECT_EQ("\"READY\"", message);
+    }
+  }
+
+  // ResourceClassificationRunner::Observer:
+  void OnRequestMatched(const GURL& url,
+                        FilterMatchResult match_result,
+                        const std::vector<GURL>& parent_frame_urls,
+                        ContentType content_type,
+                        content::RenderFrameHost* render_frame_host,
+                        const GURL& subscription,
+                        const std::string& configuration_name) override {
+    const content::WebContents* wc =
+        content::WebContents::FromRenderFrameHost(render_frame_host);
+    if (match_result == FilterMatchResult::kBlockRule &&
+        url.path() == "/blocked.png") {
+      tabs_with_blocked_resource_.insert(
+          sessions::SessionTabHelper::IdForTab(wc).id());
+    } else if (match_result == FilterMatchResult::kAllowRule &&
+               url.path() == "/allowed.png") {
+      tabs_with_allowed_resource_.insert(
+          sessions::SessionTabHelper::IdForTab(wc).id());
+    }
+  }
+
+  void OnPageAllowed(const GURL& url,
+                     content::RenderFrameHost* render_frame_host,
+                     const GURL& subscription,
+                     const std::string& configuration_name) override {}
+
+  void OnPopupMatched(const GURL& url,
+                      FilterMatchResult match_result,
+                      const GURL& opener_url,
+                      content::RenderFrameHost* render_frame_host,
+                      const GURL& subscription,
+                      const std::string& configuration_name) override {}
+
+ protected:
+  const int kTabsCount = 4;
+  const char* kTestDomain = "example.com";
+  std::set<int> tabs_with_blocked_resource_;
+  std::set<int> tabs_with_allowed_resource_;
+};
+
+IN_PROC_BROWSER_TEST_F(AdblockMultipleTabsBrowserTest, PRE_OpenManyTabs) {
+  // Load page in already opened tab
+  ASSERT_TRUE(ui_test_utils::NavigateToURL(
+      browser(),
+      embedded_test_server()->GetURL(kTestDomain, "/tab-restore.html")));
+  // Open more tabs
+  for (int i = 0; i < kTabsCount - 1; ++i) {
+    ASSERT_TRUE(ui_test_utils::NavigateToURLWithDisposition(
+        browser(),
+        embedded_test_server()->GetURL(kTestDomain, "/tab-restore.html"),
+        WindowOpenDisposition::NEW_FOREGROUND_TAB,
+        ui_test_utils::BROWSER_TEST_WAIT_FOR_LOAD_STOP));
+  }
+  EXPECT_EQ(kTabsCount, browser()->tab_strip_model()->count());
+  EXPECT_EQ(kTabsCount, static_cast<int>(tabs_with_blocked_resource_.size()));
+  EXPECT_EQ(kTabsCount, static_cast<int>(tabs_with_allowed_resource_.size()));
+
+  // Open a new browser instance
+  ui_test_utils::NavigateToURLWithDisposition(
+      browser(), GURL(url::kAboutBlankURL), WindowOpenDisposition::NEW_WINDOW,
+      ui_test_utils::BROWSER_TEST_WAIT_FOR_BROWSER);
+  BrowserList* active_browser_list = BrowserList::GetInstance();
+  EXPECT_EQ(2u, active_browser_list->size());
+
+  // Close the 1st browser and clear tabs test data
+  CloseBrowserSynchronously(browser());
+  EXPECT_EQ(1u, active_browser_list->size());
+  tabs_with_blocked_resource_.clear();
+  tabs_with_allowed_resource_.clear();
+
+  Browser* browser = active_browser_list->get(0);
+  // Restore tabs from1 st browser instance (already closed) in 2nd instance
+  RestoreTabs(browser);
+}
+
+// TODO(atokodi): Enable this test once it works on OSX. It currently does not
+// work because of an upstream bug. See DPD-2528
+#if BUILDFLAG(IS_MAC)
+#define MAYBE_OpenManyTabs DISABLED_OpenManyTabs
+#else
+#define MAYBE_OpenManyTabs OpenManyTabs
+#endif
+
+IN_PROC_BROWSER_TEST_F(AdblockMultipleTabsBrowserTest, MAYBE_OpenManyTabs) {
+  ASSERT_EQ(0u, tabs_with_blocked_resource_.size());
+  ASSERT_EQ(0u, tabs_with_allowed_resource_.size());
+  // Restore tabs from previous session (previous test)
+  RestoreTabs(browser());
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/test/adblock_popup_browsertest.cc b/chrome/browser/adblock/test/adblock_popup_browsertest.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/test/adblock_popup_browsertest.cc
@@ -0,0 +1,462 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "base/run_loop.h"
+#include "chrome/app/chrome_command_ids.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/renderer_context_menu/render_view_context_menu_browsertest_util.h"
+#include "chrome/browser/renderer_context_menu/render_view_context_menu_test_util.h"
+#include "chrome/browser/ui/browser.h"
+#include "chrome/browser/ui/browser_list.h"
+#include "chrome/test/base/in_process_browser_test.h"
+#include "chrome/test/base/ui_test_utils.h"
+#include "components/adblock/content/browser/factories/resource_classification_runner_factory.h"
+#include "components/adblock/content/browser/factories/subscription_service_factory.h"
+#include "components/adblock/content/browser/resource_classification_runner.h"
+#include "components/adblock/core/common/adblock_constants.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "content/public/browser/render_view_host.h"
+#include "content/public/test/browser_test.h"
+#include "content/public/test/browser_test_utils.h"
+#include "gmock/gmock.h"
+#include "net/dns/mock_host_resolver.h"
+#include "net/test/embedded_test_server/embedded_test_server.h"
+#include "url/gurl.h"
+
+namespace adblock {
+
+namespace {
+class TabAddedRemovedObserver : public TabStripModelObserver {
+ public:
+  explicit TabAddedRemovedObserver(TabStripModel* tab_strip_model) {
+    tab_strip_model->AddObserver(this);
+  }
+
+  void OnTabStripModelChanged(
+      TabStripModel* tab_strip_model,
+      const TabStripModelChange& change,
+      const TabStripSelectionChange& selection) override {
+    if (change.type() == TabStripModelChange::kInserted) {
+      inserted_ = true;
+      return;
+    }
+    if (change.type() == TabStripModelChange::kRemoved) {
+      EXPECT_TRUE(inserted_);
+      removed_ = true;
+      loop_.Quit();
+      return;
+    }
+    NOTREACHED();
+  }
+
+  void Wait() {
+    if (inserted_ && removed_) {
+      return;
+    }
+    loop_.Run();
+  }
+
+ private:
+  bool inserted_ = false;
+  bool removed_ = false;
+  base::RunLoop loop_;
+};
+
+enum class Redirection { ClientSide, ServerSide };
+
+}  // namespace
+
+class AdblockPopupBrowserTest
+    : public InProcessBrowserTest,
+      public ResourceClassificationRunner::Observer,
+      public testing::WithParamInterface<Redirection> {
+ public:
+  void SetUpOnMainThread() override {
+    InProcessBrowserTest::SetUpOnMainThread();
+    host_resolver()->AddRule("*", "127.0.0.1");
+    embedded_test_server()->RegisterRequestHandler(base::BindRepeating(
+        &AdblockPopupBrowserTest::RequestHandler, base::Unretained(this)));
+    ASSERT_TRUE(embedded_test_server()->Start());
+    ResourceClassificationRunnerFactory::GetForBrowserContext(
+        browser()->profile())
+        ->AddObserver(this);
+  }
+
+  void TearDownOnMainThread() override {
+    VerifyNoUnexpectedNotifications();
+    ResourceClassificationRunnerFactory::GetForBrowserContext(
+        browser()->profile())
+        ->RemoveObserver(this);
+    InProcessBrowserTest::TearDownOnMainThread();
+  }
+
+  void VerifyNoUnexpectedNotifications() {
+    EXPECT_TRUE(blocked_popups_notifications_expectations_.empty());
+    EXPECT_TRUE(allowed_popups_notifications_expectations_.empty());
+  }
+
+  bool IsServerSideRedirection() {
+    return GetParam() == Redirection::ServerSide;
+  }
+
+  virtual std::unique_ptr<net::test_server::HttpResponse> RequestHandler(
+      const net::test_server::HttpRequest& request) {
+    if (base::StartsWith("/main_page.html", request.relative_url)) {
+      static constexpr char kPopupFrameParent[] =
+          R"(
+        <!DOCTYPE html>
+        <html>
+          <head></head>
+          <body>
+            <iframe id='popup_frame' src='/popup_frame.html'></iframe>
+          </body>
+        </html>)";
+      std::unique_ptr<net::test_server::BasicHttpResponse> http_response(
+          new net::test_server::BasicHttpResponse);
+      http_response->set_code(net::HTTP_OK);
+      http_response->set_content(kPopupFrameParent);
+      http_response->set_content_type("text/html");
+      return std::move(http_response);
+    }
+    if (base::StartsWith("/popup_frame.html", request.relative_url)) {
+      static constexpr char kPopupFrame[] =
+          R"(
+        <!DOCTYPE html>
+        <html>
+          <head>
+            <script>
+              "use strict";
+              let redirect_popup_url = "/popup_will_redirect.html";
+              function scriptPopupTab() {
+                window.open(redirect_popup_url);
+              }
+              function scriptPopupWindow() {
+                window.open(redirect_popup_url, "some-popup", "resizable");
+              }
+            </script>
+          </head>
+          <body>
+            <a href="/popup_will_redirect.html" target="_blank" id="popup_link_will_redirect">Trigger link based popup with redirect</a>
+            <a href="/popup_no_redirect.html" target="_blank" id="popup_link_no_redirect">Trigger link based popup without redirect</a>
+            <a href="#script-based-popup-tab" onclick="scriptPopupTab();" id="popup_script_tab">Trigger script based popup (tab) with redirect</a>
+            <a href="#script-based-popup-window" onclick="scriptPopupWindow();" id="popup_script_window">Trigger script based popup (window) with redirect</a>
+          </body>
+        </html>)";
+      std::unique_ptr<net::test_server::BasicHttpResponse> http_response(
+          new net::test_server::BasicHttpResponse);
+      http_response->set_code(net::HTTP_OK);
+      http_response->set_content(kPopupFrame);
+      http_response->set_content_type("text/html");
+      return std::move(http_response);
+    }
+    if (base::StartsWith("/popup_no_redirect.html", request.relative_url) ||
+        base::StartsWith("/popup_redirected.html", request.relative_url)) {
+      std::unique_ptr<net::test_server::BasicHttpResponse> http_response(
+          new net::test_server::BasicHttpResponse);
+      http_response->set_code(net::HTTP_OK);
+      http_response->set_content("");
+      http_response->set_content_type("text/html");
+      return std::move(http_response);
+    }
+    if (base::StartsWith("/popup_will_redirect.html", request.relative_url)) {
+      static constexpr char kClientSideRedirectingPopup[] =
+          R"(
+        <!DOCTYPE html>
+        <html>
+          <head>
+            <script type="text/javascript">
+              window.location = "/popup_redirected.html"
+            </script>
+          </head>
+          <body></body>
+        </html>)";
+      std::unique_ptr<net::test_server::BasicHttpResponse> http_response(
+          new net::test_server::BasicHttpResponse);
+      if (IsServerSideRedirection()) {
+        http_response->set_code(net::HTTP_MOVED_PERMANENTLY);
+        http_response->AddCustomHeader(
+            "Location", GetPageUrl("/popup_redirected.html").spec());
+      } else {
+        http_response->set_code(net::HTTP_OK);
+        http_response->set_content(kClientSideRedirectingPopup);
+        http_response->set_content_type("text/html");
+      }
+      return std::move(http_response);
+    }
+    return nullptr;
+  }
+
+  void SetFilters(std::vector<std::string> filters) {
+    auto* adblock_configuration =
+        SubscriptionServiceFactory::GetForBrowserContext(browser()->profile())
+            ->GetFilteringConfiguration(kAdblockFilteringConfigurationName);
+    adblock_configuration->RemoveCustomFilter(kAllowlistEverythingFilter);
+    for (auto& filter : filters) {
+      adblock_configuration->AddCustomFilter(filter);
+    }
+  }
+
+  void TriggerPopup(const std::string& popup_id) {
+    std::string script = base::StringPrintf(
+        R"(
+      let doc = document.querySelector('iframe[id="popup_frame"]').contentWindow.document;
+      let element = doc.getElementById('%s');
+      element.click();
+    )",
+        popup_id.c_str());
+    EXPECT_TRUE(content::ExecJs(
+        browser()->tab_strip_model()->GetActiveWebContents(), script));
+  }
+
+  GURL GetPageUrl(const std::string& page) {
+    return embedded_test_server()->GetURL("popup_frame.org", page);
+  }
+
+  void NavigateToPage() {
+    ASSERT_TRUE(
+        ui_test_utils::NavigateToURL(browser(), GetPageUrl("/main_page.html")));
+  }
+
+  void WaitForTabToLoad() {
+    content::WebContents* popup =
+        browser()->tab_strip_model()->GetActiveWebContents();
+    WaitForLoadStop(popup);
+  }
+
+  void SetupNotificationsWaiter(base::RunLoop* run_loop) {
+    run_loop_ = run_loop;
+  }
+
+  // ResourceClassificationRunner::Observer:
+  void OnRequestMatched(const GURL& url,
+                        FilterMatchResult match_result,
+                        const std::vector<GURL>& parent_frame_urls,
+                        ContentType content_type,
+                        content::RenderFrameHost* render_frame_host,
+                        const GURL& subscription,
+                        const std::string& configuration_name) override {}
+
+  void OnPageAllowed(const GURL& url,
+                     content::RenderFrameHost* render_frame_host,
+                     const GURL& subscription,
+                     const std::string& configuration_name) override {}
+
+  void OnPopupMatched(const GURL& url,
+                      FilterMatchResult match_result,
+                      const GURL& opener_url,
+                      content::RenderFrameHost* render_frame_host,
+                      const GURL& subscription,
+                      const std::string& configuration_name) override {
+    auto& list = (match_result == FilterMatchResult::kBlockRule
+                      ? blocked_popups_notifications_expectations_
+                      : allowed_popups_notifications_expectations_);
+    auto it = std::find(list.begin(), list.end(), url.ExtractFileName());
+    ASSERT_FALSE(it == list.end())
+        << "Path " << url.ExtractFileName() << " not on list";
+    list.erase(it);
+    if (run_loop_ && allowed_popups_notifications_expectations_.empty() &&
+        blocked_popups_notifications_expectations_.empty()) {
+      run_loop_->Quit();
+    }
+  }
+
+  std::vector<std::string> allowed_popups_notifications_expectations_;
+  std::vector<std::string> blocked_popups_notifications_expectations_;
+  raw_ptr<base::RunLoop> run_loop_ = nullptr;
+};
+
+IN_PROC_BROWSER_TEST_F(AdblockPopupBrowserTest, PopupLinkBlocked) {
+  SetFilters({"popup_no_redirect.html^$popup"});
+  blocked_popups_notifications_expectations_.emplace_back(
+      "popup_no_redirect.html");
+  NavigateToPage();
+  TabAddedRemovedObserver observer(browser()->tab_strip_model());
+  TriggerPopup("popup_link_no_redirect");
+  observer.Wait();
+  EXPECT_EQ(1, browser()->tab_strip_model()->count());
+}
+
+IN_PROC_BROWSER_TEST_P(AdblockPopupBrowserTest,
+                       PopupScriptTabWithRedirectBlocked) {
+  SetFilters({"popup_redirected.html^$popup"});
+  blocked_popups_notifications_expectations_.emplace_back(
+      "popup_redirected.html");
+  NavigateToPage();
+  TabAddedRemovedObserver observer(browser()->tab_strip_model());
+  TriggerPopup("popup_script_tab");
+  observer.Wait();
+  EXPECT_EQ(1, browser()->tab_strip_model()->count());
+}
+
+IN_PROC_BROWSER_TEST_P(AdblockPopupBrowserTest,
+                       PopupScriptWindowWithRedirectBlocked) {
+  SetFilters({"popup_redirected.html^$popup"});
+  blocked_popups_notifications_expectations_.emplace_back(
+      "popup_redirected.html");
+  NavigateToPage();
+  TriggerPopup("popup_script_window");
+  // Wait for 2nd browser to get closed (new window popup blocked)
+  EXPECT_EQ(2u, BrowserList::GetInstance()->size());
+  ui_test_utils::WaitForBrowserToClose(BrowserList::GetInstance()->get(1));
+  EXPECT_EQ(1u, BrowserList::GetInstance()->size());
+}
+
+IN_PROC_BROWSER_TEST_P(AdblockPopupBrowserTest, PopupLinkWithRedirectBlocked) {
+  SetFilters({"popup_redirected.html^$popup"});
+  blocked_popups_notifications_expectations_.emplace_back(
+      "popup_redirected.html");
+  NavigateToPage();
+  TabAddedRemovedObserver observer(browser()->tab_strip_model());
+  TriggerPopup("popup_link_will_redirect");
+  observer.Wait();
+  EXPECT_EQ(1, browser()->tab_strip_model()->count());
+}
+
+IN_PROC_BROWSER_TEST_P(
+    AdblockPopupBrowserTest,
+    PopupScriptTabWithRedirectAllowedByIntermediateParentDocument) {
+  SetFilters({"popup_redirected.html^$popup", "@@/popup_frame.html^$document"});
+  allowed_popups_notifications_expectations_.emplace_back(
+      "popup_redirected.html");
+  NavigateToPage();
+  ui_test_utils::TabAddedWaiter waiter(browser());
+  TriggerPopup("popup_script_tab");
+  waiter.Wait();
+  WaitForTabToLoad();
+  EXPECT_EQ(2, browser()->tab_strip_model()->count());
+}
+
+IN_PROC_BROWSER_TEST_P(
+    AdblockPopupBrowserTest,
+    PopupScriptWindowWithRedirectAllowedByIntermediateParentDocument) {
+  SetFilters({"popup_redirected.html^$popup", "@@/popup_frame.html^$document"});
+  allowed_popups_notifications_expectations_.emplace_back(
+      "popup_redirected.html");
+  NavigateToPage();
+  base::RunLoop run_loop;
+  SetupNotificationsWaiter(&run_loop);
+  TriggerPopup("popup_script_window");
+  run_loop.Run();
+  EXPECT_EQ(2u, BrowserList::GetInstance()->size());
+}
+
+IN_PROC_BROWSER_TEST_P(
+    AdblockPopupBrowserTest,
+    PopupLinkWithRedirectAllowedByIntermediateParentDocument) {
+  SetFilters({"popup_redirected.html^$popup", "@@/popup_frame.html^$document"});
+  allowed_popups_notifications_expectations_.emplace_back(
+      "popup_redirected.html");
+  NavigateToPage();
+  ui_test_utils::TabAddedWaiter waiter(browser());
+  TriggerPopup("popup_link_will_redirect");
+  waiter.Wait();
+  WaitForTabToLoad();
+  EXPECT_EQ(2, browser()->tab_strip_model()->count());
+  ;
+}
+
+IN_PROC_BROWSER_TEST_P(AdblockPopupBrowserTest,
+                       PopupScriptTabWithRedirectAllowedByParentDocument) {
+  SetFilters({"popup_redirected.html^$popup", "@@/main_page.html^$document"});
+  allowed_popups_notifications_expectations_.emplace_back(
+      "popup_redirected.html");
+  NavigateToPage();
+  ui_test_utils::TabAddedWaiter waiter(browser());
+  TriggerPopup("popup_script_tab");
+  waiter.Wait();
+  WaitForTabToLoad();
+  EXPECT_EQ(2, browser()->tab_strip_model()->count());
+}
+
+IN_PROC_BROWSER_TEST_P(AdblockPopupBrowserTest,
+                       PopupScriptWindowWithRedirectAllowedByParentDocument) {
+  SetFilters({"popup_redirected.html^$popup", "@@/main_page.html^$document"});
+  allowed_popups_notifications_expectations_.emplace_back(
+      "popup_redirected.html");
+  NavigateToPage();
+  base::RunLoop run_loop;
+  SetupNotificationsWaiter(&run_loop);
+  TriggerPopup("popup_script_window");
+  run_loop.Run();
+  EXPECT_EQ(2u, BrowserList::GetInstance()->size());
+}
+
+IN_PROC_BROWSER_TEST_P(AdblockPopupBrowserTest,
+                       PopupLinkWithRedirectAllowedByParentDocument) {
+  SetFilters({"popup_redirected.html^$popup", "@@/main_page.html^$document"});
+  allowed_popups_notifications_expectations_.emplace_back(
+      "popup_redirected.html");
+  NavigateToPage();
+  ui_test_utils::TabAddedWaiter waiter(browser());
+  TriggerPopup("popup_link_will_redirect");
+  waiter.Wait();
+  WaitForTabToLoad();
+  EXPECT_EQ(2, browser()->tab_strip_model()->count());
+}
+
+// Make sure that we correctly recognize and apply blocking of
+// redirected popups only for real popups.
+IN_PROC_BROWSER_TEST_P(AdblockPopupBrowserTest,
+                       LinkOpenedByContextMenuInNewTabNotBlocked) {
+  SetFilters({"popup_redirected.html^$popup"});
+  ContextMenuNotificationObserver menu_observer(
+      IDC_CONTENT_CONTEXT_OPENLINKNEWTAB);
+  ui_test_utils::AllBrowserTabAddedWaiter add_tab;
+
+  std::string script = base::StringPrintf(
+      "data:text/html,<a href='%s'>link</a>",
+      GetPageUrl("/popup_will_redirect.html").spec().c_str());
+  // Go to a page with a link
+  ASSERT_TRUE(ui_test_utils::NavigateToURL(browser(), GURL(script)));
+
+  // Opens a link in a new tab via a "real" context menu.
+  blink::WebMouseEvent mouse_event(
+      blink::WebInputEvent::Type::kMouseDown,
+      blink::WebInputEvent::kNoModifiers,
+      blink::WebInputEvent::GetStaticTimeStampForTests());
+  mouse_event.button = blink::WebMouseEvent::Button::kRight;
+  mouse_event.SetPositionInWidget(15, 15);
+  content::WebContents* tab =
+      browser()->tab_strip_model()->GetActiveWebContents();
+  gfx::Rect offset = tab->GetContainerBounds();
+  mouse_event.SetPositionInScreen(15 + offset.x(), 15 + offset.y());
+  mouse_event.click_count = 1;
+  tab->GetPrimaryMainFrame()
+      ->GetRenderViewHost()
+      ->GetWidget()
+      ->ForwardMouseEvent(mouse_event);
+  mouse_event.SetType(blink::WebInputEvent::Type::kMouseUp);
+  tab->GetPrimaryMainFrame()
+      ->GetRenderViewHost()
+      ->GetWidget()
+      ->ForwardMouseEvent(mouse_event);
+
+  // The menu_observer will select "Open in new tab", wait for the new tab to
+  // be added.
+  tab = add_tab.Wait();
+  EXPECT_TRUE(content::WaitForLoadStop(tab));
+
+  // Verify that it's the correct tab.
+  EXPECT_EQ(GetPageUrl("/popup_redirected.html"), tab->GetLastCommittedURL());
+}
+
+INSTANTIATE_TEST_SUITE_P(All,
+                         AdblockPopupBrowserTest,
+                         testing::Values(Redirection::ClientSide,
+                                         Redirection::ServerSide));
+
+}  // namespace adblock
diff --git a/chrome/browser/chrome_browser_main.cc b/chrome/browser/chrome_browser_main.cc
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -1,6 +1,10 @@
 // Copyright 2012 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/chrome_browser_main.h"
 
@@ -77,6 +81,7 @@
 #include "chrome/grit/branded_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "chrome/installer/util/google_update_settings.h"
+#include "components/adblock/content/browser/adblock_web_ui_controller_factory.h"
 #include "components/color/color_mixers.h"
 #include "components/device_event_log/device_event_log.h"
 #include "components/embedder_support/origin_trials/component_updater_utils.h"
@@ -1535,6 +1540,8 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   // called inside PostProfileInit.
   content::WebUIControllerFactory::RegisterFactory(
       ChromeWebUIControllerFactory::GetInstance());
+  content::WebUIControllerFactory::RegisterFactory(
+      adblock::AdblockWebUIControllerFactory::GetInstance());
   RegisterChromeWebUIConfigs();
   RegisterChromeUntrustedWebUIConfigs();
 
diff --git a/chrome/browser/client_hints/client_hints_browsertest.cc b/chrome/browser/client_hints/client_hints_browsertest.cc
--- a/chrome/browser/client_hints/client_hints_browsertest.cc
+++ b/chrome/browser/client_hints/client_hints_browsertest.cc
@@ -1,6 +1,10 @@
 // Copyright 2017 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "components/client_hints/common/client_hints.h"
 
@@ -661,7 +665,12 @@ class ClientHintsBrowserTest : public policy::PolicyTest {
     std::unique_ptr<base::FeatureList> feature_list(new base::FeatureList);
     // Force-enable the ClientHintsFormFactors feature, so that the header is
     // represented in the various header counts.
-    feature_list->InitFromCommandLine(kDefaultFeatures, "");
+    feature_list->InitFromCommandLine(
+        kDefaultFeatures,
+        // Disabling AdblockPlus because the async implementation of
+        // AdblockURLLoaderThrottle::WillStartRequest confuses
+        // ThirdPartyURLLoaderInterceptor.
+        "AdblockPlus");
     scoped_feature_list.InitWithFeatureList(std::move(feature_list));
   }
 
diff --git a/chrome/browser/extensions/BUILD.gn b/chrome/browser/extensions/BUILD.gn
--- a/chrome/browser/extensions/BUILD.gn
+++ b/chrome/browser/extensions/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//build/config/chromebox_for_meetings/buildflags.gni")
 import("//build/config/chromeos/ui_mode.gni")
@@ -424,6 +427,7 @@ source_set("extensions") {
     "window_controller_list.h",
     "window_controller_list_observer.h",
   ]
+
   configs += [
     "//build/config:precompiled_headers",
     "//build/config/compiler:wexit_time_destructors",
@@ -775,6 +779,7 @@ source_set("extensions") {
       ]
     }
 
+
     # Chrome OS does not support Native Messaging policies.
     if (!is_chromeos) {
       sources += [
diff --git a/chrome/browser/net/errorpage_browsertest.cc b/chrome/browser/net/errorpage_browsertest.cc
--- a/chrome/browser/net/errorpage_browsertest.cc
+++ b/chrome/browser/net/errorpage_browsertest.cc
@@ -2,6 +2,10 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
+
 #include <algorithm>
 #include <memory>
 #include <utility>
@@ -38,6 +42,7 @@
 #include "chrome/common/pref_names.h"
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/ui_test_utils.h"
+#include "components/adblock/core/common/adblock_switches.h"
 #include "components/browsing_data/content/browsing_data_helper.h"
 #include "components/embedder_support/switches.h"
 #include "components/error_page/content/browser/net_error_auto_reloader.h"
@@ -639,6 +644,9 @@ class ErrorPageAutoReloadTest : public InProcessBrowserTest {
  public:
   void SetUpCommandLine(base::CommandLine* command_line) override {
     command_line->AppendSwitch(embedder_support::kEnableAutoReload);
+    // The URLLoaderInterceptor is not resilient to the browser making
+    // adblock-related requests, they confuse this test.
+    command_line->AppendSwitch(adblock::switches::kDisableAdblock);
   }
 
   void TearDownOnMainThread() override { url_loader_interceptor_.reset(); }
diff --git a/chrome/browser/page_load_metrics/observers/ad_metrics/ads_page_load_metrics_observer_browsertest.cc b/chrome/browser/page_load_metrics/observers/ad_metrics/ads_page_load_metrics_observer_browsertest.cc
--- a/chrome/browser/page_load_metrics/observers/ad_metrics/ads_page_load_metrics_observer_browsertest.cc
+++ b/chrome/browser/page_load_metrics/observers/ad_metrics/ads_page_load_metrics_observer_browsertest.cc
@@ -1,6 +1,10 @@
 // Copyright 2017 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "components/page_load_metrics/browser/observers/ad_metrics/ads_page_load_metrics_observer.h"
 
@@ -23,6 +27,7 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/interactive_test_utils.h"
 #include "chrome/test/base/ui_test_utils.h"
+#include "components/adblock/core/features.h"
 #include "components/heavy_ad_intervention/heavy_ad_features.h"
 #include "components/page_load_metrics/browser/ads_page_load_metrics_test_waiter.h"
 #include "components/page_load_metrics/browser/features.h"
@@ -1513,7 +1518,7 @@ class AdsPageLoadMetricsObserverResourceBrowserTest
          {heavy_ad_intervention::features::kHeavyAdIntervention, {}},
          {heavy_ad_intervention::features::kHeavyAdPrivacyMitigations,
           {{"host-threshold", "3"}}}},
-        {});
+        {adblock::kAdblockPlusFeature});
     if (IsReduceTransferSizeUpdatedIPCEnabled()) {
       reduce_ipc_feature_list_.InitAndEnableFeature(
           network::features::kReduceTransferSizeUpdatedIPC);
diff --git a/chrome/browser/preferences/BUILD.gn b/chrome/browser/preferences/BUILD.gn
--- a/chrome/browser/preferences/BUILD.gn
+++ b/chrome/browser/preferences/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2019 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//build/config/android/rules.gni")
 import("//third_party/jni_zero/jni_zero.gni")
@@ -55,6 +58,7 @@ java_cpp_strings("java_pref_names_srcjar") {
     "//chrome/browser/enterprise/reporting/prefs.cc",
     "//chrome/browser/ui/safety_hub/safety_hub_prefs.h",
     "//chrome/common/pref_names.h",
+    "//components/adblock/core/common/adblock_prefs.cc",
     "//components/autofill/core/common/autofill_prefs.h",
     "//components/bookmarks/common/bookmark_pref_names.h",
     "//components/commerce/core/pref_names.h",
diff --git a/chrome/browser/prefs/chrome_pref_service_factory.cc b/chrome/browser/prefs/chrome_pref_service_factory.cc
--- a/chrome/browser/prefs/chrome_pref_service_factory.cc
+++ b/chrome/browser/prefs/chrome_pref_service_factory.cc
@@ -1,6 +1,10 @@
 // Copyright 2012 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/prefs/chrome_pref_service_factory.h"
 
@@ -44,6 +48,7 @@
 #include "chrome/grit/branded_strings.h"
 #include "chrome/grit/browser_resources.h"
 #include "chrome/grit/generated_resources.h"
+#include "components/adblock/core/common/adblock_prefs.h"
 #include "components/component_updater/pref_names.h"
 #include "components/policy/core/browser/configuration_policy_pref_store.h"
 #include "components/pref_registry/pref_registry_syncable.h"
@@ -192,6 +197,12 @@ const auto kTrackedPrefs = std::to_array<prefs::TrackedPreferenceMetadata>({
     {35, prefs::kExtensionsUIDeveloperMode, EnforcementLevel::ENFORCE_ON_LOAD,
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
 #endif
+    {100, adblock::common::prefs::kSubscriptionSignatures,
+     EnforcementLevel::ENFORCE_ON_LOAD, PrefTrackingStrategy::SPLIT,
+     ValueType::IMPERSONAL},
+    {101, adblock::common::prefs::kLastUsedSchemaVersion,
+     EnforcementLevel::ENFORCE_ON_LOAD, PrefTrackingStrategy::ATOMIC,
+     ValueType::IMPERSONAL}
 
     // See note at top, new items added here also need to be added to
     // histograms.xml's TrackedPreference enum.
diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -1,6 +1,10 @@
 // Copyright 2013 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.h"
 
@@ -242,6 +246,15 @@
 #include "chrome/browser/webid/federated_identity_permission_context_factory.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/chrome_features.h"
+#include "components/adblock/content/browser/factories/adblock_request_throttle_factory.h"
+#include "components/adblock/content/browser/factories/adblock_telemetry_service_factory.h"
+#include "components/adblock/content/browser/factories/content_security_policy_injector_factory.h"
+#include "components/adblock/content/browser/factories/element_hider_factory.h"
+#include "components/adblock/content/browser/factories/resource_classification_runner_factory.h"
+#include "components/adblock/content/browser/factories/session_stats_factory.h"
+#include "components/adblock/content/browser/factories/sitekey_storage_factory.h"
+#include "components/adblock/content/browser/factories/subscription_persistent_metadata_factory.h"
+#include "components/adblock/content/browser/factories/subscription_service_factory.h"
 #include "components/autofill/content/browser/autofill_log_router_factory.h"
 #include "components/breadcrumbs/core/breadcrumbs_status.h"
 #include "components/captive_portal/core/buildflags.h"
@@ -916,6 +929,15 @@ void ChromeBrowserMainExtraPartsProfiles::
   // Makes manual testing possible.
   FakeSmartCardDeviceServiceFactory::GetInstance();
 #endif
+  adblock::AdblockTelemetryServiceFactory::GetInstance();
+  adblock::AdblockRequestThrottleFactory::GetInstance();
+  adblock::ContentSecurityPolicyInjectorFactory::GetInstance();
+  adblock::ElementHiderFactory::GetInstance();
+  adblock::ResourceClassificationRunnerFactory::GetInstance();
+  adblock::SessionStatsFactory::GetInstance();
+  adblock::SitekeyStorageFactory::GetInstance();
+  adblock::SubscriptionPersistentMetadataFactory::GetInstance();
+  adblock::SubscriptionServiceFactory::GetInstance();
 #if BUILDFLAG(IS_ANDROID)
   FastCheckoutCapabilitiesFetcherFactory::GetInstance();
 #endif
diff --git a/chrome/browser/profiles/profile_keyed_service_browsertest.cc b/chrome/browser/profiles/profile_keyed_service_browsertest.cc
--- a/chrome/browser/profiles/profile_keyed_service_browsertest.cc
+++ b/chrome/browser/profiles/profile_keyed_service_browsertest.cc
@@ -277,6 +277,17 @@ IN_PROC_BROWSER_TEST_F(ProfileKeyedServiceBrowserTest,
     "PermissionsUpdaterShutdownFactory",
     "PluginInfoHostImpl",
     "TurnSyncOnHelperShutdownNotifier",
+
+    // Eyeo services
+    "AdblockRequestThrottle",
+    "AdblockSubscriptionPersistentMetadata",
+    "AdblockSubscriptionService",
+    "AdblockTelemetryService",
+    "ContentSecurityPolicyInjector",
+    "ElementHider",
+    "ResourceClassificationRunner",
+    "SessionStats",
+    "SitekeyStorage",
   };
   // clang-format on
 
@@ -852,6 +863,13 @@ IN_PROC_BROWSER_TEST_F(ProfileKeyedServiceGuestBrowserTest,
     "ZeroSuggestCacheServiceFactory",
 #endif  // !BUILDFLAG(IS_CHROMEOS)
 
+    // eyeo Chromium SDK services:
+    "AdblockPrivateAPI",
+    "EyeoFilteringPrivateAPI",
+    "ResourceClassificationRunner",
+    "SessionStats",
+    "SitekeyStorage",
+
 #if BUILDFLAG(IS_CHROMEOS)
     // TODO(crbug.com/374351946):
     // Verify these are necessary: then reorder or remove.
diff --git a/chrome/browser/resources/BUILD.gn b/chrome/browser/resources/BUILD.gn
--- a/chrome/browser/resources/BUILD.gn
+++ b/chrome/browser/resources/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//chrome/browser/buildflags.gni")
 import("//chrome/common/features.gni")
@@ -291,6 +294,7 @@ group("dev_ui_resources") {
     "predictors:resources",
     "privacy_sandbox/internals:resources",
     "usb_internals:resources",
+    "//components/adblock/content/resources/adblock_internals:resources",
     "//components/commerce/core/internals/resources",
     "//components/data_sharing/data_sharing_internals/resources",
     "//components/download/resources/download_internals:resources",
@@ -358,6 +362,7 @@ repack("dev_ui_paks") {
     "$root_gen_dir/chrome/predictors_resources.pak",
     "$root_gen_dir/chrome/privacy_sandbox_internals_resources.pak",
     "$root_gen_dir/chrome/usb_internals_resources.pak",
+    "$root_gen_dir/components/adblock_internals_resources.pak",
     "$root_gen_dir/components/commerce_internals_resources.pak",
     "$root_gen_dir/components/data_sharing_internals_resources.pak",
     "$root_gen_dir/components/dev_ui_components_resources.pak",
diff --git a/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc b/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
@@ -5,6 +5,10 @@
 // This test creates a fake safebrowsing service, where we can inject known-
 // threat urls.  It then uses a real browser to go to these urls, and sends
 // "goback" or "proceed" commands and verifies they work.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "components/safe_browsing/content/browser/safe_browsing_blocking_page.h"
 
@@ -68,6 +72,7 @@
 #include "chrome/common/url_constants.h"
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/ui_test_utils.h"
+#include "components/adblock/core/features.h"
 #include "components/enterprise/connectors/core/common.h"
 #include "components/enterprise/connectors/core/connectors_prefs.h"
 #include "components/google/core/common/google_util.h"
@@ -358,7 +363,7 @@ class SafeBrowsingBlockingPageBrowserTest
     scoped_feature_list_.InitWithFeaturesAndParameters(
         {tag_and_attribute, add_warning_shown_timestamp_csbrrs,
          create_warning_shown_csbrrs, abusive_notification_revocation},
-        {});
+        {adblock::kAdblockPlusFeature});
   }
 
   SafeBrowsingBlockingPageBrowserTest(
diff --git a/chrome/browser/subresource_filter/subresource_filter_browser_test_harness.cc b/chrome/browser/subresource_filter/subresource_filter_browser_test_harness.cc
--- a/chrome/browser/subresource_filter/subresource_filter_browser_test_harness.cc
+++ b/chrome/browser/subresource_filter/subresource_filter_browser_test_harness.cc
@@ -1,6 +1,10 @@
 // Copyright 2017 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/subresource_filter/subresource_filter_browser_test_harness.h"
 
@@ -22,6 +26,7 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/chrome_paths.h"
 #include "chrome/test/base/chrome_test_utils.h"
+#include "components/adblock/core/features.h"
 #include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/content_settings/browser/page_specific_content_settings.h"
 #include "components/safe_browsing/core/browser/db/v4_protocol_manager_util.h"
@@ -152,7 +157,8 @@ void SubresourceFilterSharedBrowserTest::NavigateFrame(const char* frame_name,
 SubresourceFilterBrowserTest::SubresourceFilterBrowserTest() {
   scoped_feature_list_.InitWithFeatures(
       /*enabled_features=*/{kAdTagging},
-      /*disabled_features=*/{features::kHttpsUpgrades});
+      /*disabled_features=*/{features::kHttpsUpgrades,
+                             adblock::kAdblockPlusFeature});
 }
 
 SubresourceFilterBrowserTest::~SubresourceFilterBrowserTest() = default;
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//build/config/buildflags_paint_preview.gni")
 import("//build/config/compiler/compiler.gni")
@@ -423,6 +426,7 @@ static_library("ui") {
     "//chrome/services/media_gallery_util/public/mojom",
     "//components/access_code_cast/common:metrics",
     "//components/account_id",
+    "//components/adblock/content:browser",
     "//components/affiliations/core/browser:affiliations",
     "//components/autofill/content/browser",
     "//components/autofill/content/browser:risk_proto",
diff --git a/chrome/browser/ui/prefs/pref_watcher.cc b/chrome/browser/ui/prefs/pref_watcher.cc
--- a/chrome/browser/ui/prefs/pref_watcher.cc
+++ b/chrome/browser/ui/prefs/pref_watcher.cc
@@ -1,6 +1,10 @@
 // Copyright 2018 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/ui/prefs/pref_watcher.h"
 
@@ -21,6 +25,7 @@
 #include "chrome/browser/renderer_preferences_util.h"
 #include "chrome/browser/ui/prefs/prefs_tab_helper.h"
 #include "chrome/common/pref_names.h"
+#include "components/adblock/core/common/adblock_prefs.h"
 #include "components/keyed_service/core/keyed_service.h"
 #include "components/language/core/browser/pref_names.h"
 #include "components/live_caption/pref_names.h"
@@ -82,6 +87,14 @@ const char* const kWebPrefsToObserve[] = {
     prefs::kAccessibilityFocusHighlightEnabled,
 #endif
     prefs::kPageColorsBlockList,
+
+    adblock::common::prefs::kAdblockAllowedDomainsLegacy,
+    adblock::common::prefs::kAdblockCustomFiltersLegacy,
+    adblock::common::prefs::kAdblockCustomSubscriptionsLegacy,
+    adblock::common::prefs::kAdblockSubscriptionsLegacy,
+    adblock::common::prefs::kEnableAcceptableAdsLegacy,
+    adblock::common::prefs::kEnableAdblockLegacy,
+
 };
 
 }  // namespace
diff --git a/chrome/browser/ui/tab_helpers.cc b/chrome/browser/ui/tab_helpers.cc
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -1,6 +1,10 @@
 // Copyright 2014 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/ui/tab_helpers.h"
 
@@ -102,6 +106,8 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/chrome_isolated_world_ids.h"
 #include "chrome/common/chrome_switches.h"
+#include "components/adblock/content/browser/adblock_webcontents_observer.h"
+#include "components/adblock/content/browser/factories/embedding_utils.h"
 #include "components/autofill/content/browser/content_autofill_client.h"
 #include "components/autofill/content/browser/content_autofill_driver_factory.h"
 #include "components/autofill/core/browser/foundations/browser_autofill_manager.h"
@@ -343,6 +349,12 @@ void TabHelpers::AttachTabHelpers(WebContents* web_contents) {
                                                    optimization_guide_decider);
     }
   }
+
+  auto* original_profile = profile->GetOriginalProfile();
+  adblock::EnsureBackgroundServicesStarted(original_profile);
+  adblock::RegisterAdblockWebContentObserver<
+      adblock::AdblockWebContentObserver>(web_contents, original_profile);
+
   autofill::AutofillClientProvider& autofill_client_provider =
       autofill::AutofillClientProviderFactory::GetForProfile(profile);
   autofill_client_provider.CreateClientForWebContents(web_contents);
@@ -380,6 +392,7 @@ void TabHelpers::AttachTabHelpers(WebContents* web_contents) {
     ip_protection::IpProtectionStatus::CreateForWebContents(web_contents);
   }
 #endif  // BUILDFLAG(IS_ANDROID)
+
   if (breadcrumbs::IsEnabled(g_browser_process->local_state())) {
     BreadcrumbManagerTabHelper::CreateForWebContents(web_contents);
   }
diff --git a/chrome/chrome_paks.gni b/chrome/chrome_paks.gni
--- a/chrome/chrome_paks.gni
+++ b/chrome/chrome_paks.gni
@@ -1,6 +1,9 @@
 # Copyright 2016 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//ash/ambient/resources/resources.gni")
 import("//build/config/chrome_build.gni")
@@ -124,6 +127,7 @@ template("chrome_extra_paks") {
       "$root_gen_dir/chrome/common_resources.pak",
       "$root_gen_dir/chrome/saved_tab_groups_unsupported_resources.pak",
       "$root_gen_dir/chrome/segmentation_internals_resources.pak",
+      "$root_gen_dir/components/adblock/core/resources/adblock_resources.pak",
       "$root_gen_dir/components/autofill/core/browser/geo/autofill_address_rewriter_resources.pak",
       "$root_gen_dir/components/autofill_and_password_manager_internals_resources.pak",
       "$root_gen_dir/components/chrome_urls_resources.pak",
@@ -159,6 +163,7 @@ template("chrome_extra_paks") {
       "//chrome/browser/resources:resources",
       "//chrome/browser/resources/saved_tab_groups_unsupported:resources",
       "//chrome/common:resources",
+      "//components/adblock/core/resources:adblock_resources",
       "//components/autofill/core/browser:autofill_address_rewriter_resources",
       "//components/metrics:server_urls_grd",
       "//components/resources",
diff --git a/chrome/common/BUILD.gn b/chrome/common/BUILD.gn
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//build/buildflag_header.gni")
 import("//build/config/chrome_build.gni")
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//build/cipd/cipd.gni")
 import("//build/config/buildflags_paint_preview.gni")
@@ -1766,6 +1769,7 @@ if (is_android) {
       "//chrome/test/data/webui:browser_tests",
       "//chrome/test/data/webui:interactive_ui_tests",
       "//chrome/test/data/webui:resources",
+      "//components/adblock/content:browser",
       "//components/autofill/content/browser:test_support",
       "//components/autofill/content/renderer:test_support",
       "//components/autofill/core/common:common",
@@ -2388,6 +2392,7 @@ if (!is_android) {
       "//chrome/test/media_router/access_code_cast:access_code_cast_integration_base",
       "//chrome/test/payments:test_support",
       "//chrome/test/supervised_user:test_support",
+      "//components/adblock/content:browser",
       "//components/affiliations/core/browser:affiliation_proto",
       "//components/affiliations/core/browser:test_support",
       "//components/autofill/content/browser:autofill_shared_storage_proto",
@@ -2891,6 +2896,7 @@ if (!is_android) {
       "//chrome/renderer/resources/extensions/",
       "//chrome/test/data/cart/",
       "//components/test/data/ad_tagging/",
+      "//components/test/data/adblock/",
       "//components/test/data/ads_observer/",
       "//components/test/data/autofill/",
       "//components/test/data/custom_handlers",
@@ -2980,6 +2986,9 @@ if (!is_android) {
       "../browser/accessibility/live_translate_controller_browsertest.cc",
       "../browser/accessibility/page_colors_browsertest.cc",
       "../browser/accessibility/phrase_segmentation/dependency_parser_model_loader_browsertest.cc",
+      "../browser/adblock/test/adblock_frame_hierarchy_builder_browsertest.cc",
+      "../browser/adblock/test/adblock_multiple_tabs_browsertest.cc",
+      "../browser/adblock/test/adblock_popup_browsertest.cc",
       "../browser/ai/ai_data_keyed_service_browsertest.cc",
       "../browser/attribution_reporting/chrome_attribution_browsertest.cc",
       "../browser/autocomplete/autocomplete_browsertest.cc",
@@ -4531,6 +4540,7 @@ if (!is_android) {
         ]
       }
 
+
       if (is_chromeos) {
         deps +=
             [ "//chromeos/ash/components/network/portal_detector:test_support" ]
@@ -6049,6 +6059,7 @@ test("unit_tests") {
   sources = [
     # All unittests in browser, common, renderer and service.
     "../browser/about_flags_unittest.cc",
+    "../browser/adblock/adblock_chrome_content_browser_client_unittest.cc",
     "../browser/after_startup_task_utils_unittest.cc",
     "../browser/apps/icon_standardizer_unittest.cc",
     "../browser/apps/user_type_filter_unittest.cc",
@@ -6745,6 +6756,8 @@ test("unit_tests") {
     "//chrome/common/themes:unit_tests",
     "//chrome/services/file_util:unit_tests",
     "//components/account_id",
+    "//components/adblock/content/browser:test_support",
+    "//components/adblock/core:test_support",
     "//components/affiliations/core/browser:test_support",
     "//components/assist_ranker/proto",
     "//components/autofill/content/browser:test_support",
@@ -10580,6 +10593,7 @@ if (!is_android) {
       "//chrome/browser:test_support_ui",
       "//chrome/browser/ui/exclusive_access",
       "//chrome/browser/ui/views/side_panel",
+      "//components/adblock/core:test_support",
       "//components/supervised_user/core/browser",
       "//components/webui/chrome_urls",
       "//content/public/browser",
diff --git a/chrome/test/base/in_process_browser_test.cc b/chrome/test/base/in_process_browser_test.cc
--- a/chrome/test/base/in_process_browser_test.cc
+++ b/chrome/test/base/in_process_browser_test.cc
@@ -2,6 +2,10 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
+
 #include "chrome/test/base/in_process_browser_test.h"
 
 #include <map>
@@ -155,6 +159,10 @@
 #include "ui/views/widget/widget.h"
 #endif
 
+#include "components/adblock/content/browser/factories/subscription_service_factory.h"
+#include "components/adblock/core/common/adblock_constants.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+
 namespace {
 
 #if BUILDFLAG(IS_CHROMEOS)
@@ -595,8 +603,22 @@ void InProcessBrowserTest::CreatedBrowserMainParts(
 
 void InProcessBrowserTest::SelectFirstBrowser() {
   const BrowserList* browser_list = BrowserList::GetInstance();
-  if (!browser_list->empty())
+  if (!browser_list->empty()) {
     browser_ = browser_list->get(0);
+    // Adding an allowing filter that overrides and disables all blocking
+    // filters in order to avoid unwanted interactions with simulated network
+    // loads. This custom filter is removed for tests that specifically verify
+    // ad-filtering.
+    auto* adblock_configuration =
+        adblock::SubscriptionServiceFactory::GetForBrowserContext(
+            browser_->profile()->GetOriginalProfile())
+            ->GetFilteringConfiguration(
+                adblock::kAdblockFilteringConfigurationName);
+    if (adblock_configuration) {
+      adblock_configuration->AddCustomFilter(
+          adblock::kAllowlistEverythingFilter);
+    }
+  }
 }
 
 void InProcessBrowserTest::RecordPropertyFromMap(
--
